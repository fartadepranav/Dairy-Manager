{"ast":null,"code":"import _objectSpread from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { arrow as arrow$1, computePosition } from '@floating-ui/dom';\nexport { autoPlacement, autoUpdate, computePosition, detectOverflow, flip, getOverflowAncestors, hide, inline, limitShift, offset, platform, shift, size } from '@floating-ui/dom';\nimport * as React from 'react';\nimport { useLayoutEffect, useEffect } from 'react';\nimport * as ReactDOM from 'react-dom';\n\n/**\n * A data provider that provides data to position an inner element of the\n * floating element (usually a triangle or caret) so that it is centered to the\n * reference element.\n * This wraps the core `arrow` middleware to allow React refs as the element.\n * @see https://floating-ui.com/docs/arrow\n */\nvar arrow = function arrow(options) {\n  var element = options.element,\n    padding = options.padding;\n  function isRef(value) {\n    return Object.prototype.hasOwnProperty.call(value, 'current');\n  }\n  return {\n    name: 'arrow',\n    options: options,\n    fn: function fn(args) {\n      if (isRef(element)) {\n        if (element.current != null) {\n          return arrow$1({\n            element: element.current,\n            padding: padding\n          }).fn(args);\n        }\n        return {};\n      } else if (element) {\n        return arrow$1({\n          element: element,\n          padding: padding\n        }).fn(args);\n      }\n      return {};\n    }\n  };\n};\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\n// functions\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (typeof a === 'function' && a.toString() === b.toString()) {\n    return true;\n  }\n  var length, i, keys;\n  if (a && b && typeof a == 'object') {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n}\nfunction useLatestRef(value) {\n  var ref = React.useRef(value);\n  index(function () {\n    ref.current = value;\n  });\n  return ref;\n}\n\n/**\n * Provides data to position a floating element.\n * @see https://floating-ui.com/docs/react\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$placement = _options.placement,\n    placement = _options$placement === void 0 ? 'bottom' : _options$placement,\n    _options$strategy = _options.strategy,\n    strategy = _options$strategy === void 0 ? 'absolute' : _options$strategy,\n    _options$middleware = _options.middleware,\n    middleware = _options$middleware === void 0 ? [] : _options$middleware,\n    platform = _options.platform,\n    whileElementsMounted = _options.whileElementsMounted,\n    open = _options.open;\n  var _React$useState = React.useState({\n      x: null,\n      y: null,\n      strategy: strategy,\n      placement: placement,\n      middlewareData: {},\n      isPositioned: false\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    data = _React$useState2[0],\n    setData = _React$useState2[1];\n  var _React$useState3 = React.useState(middleware),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    latestMiddleware = _React$useState4[0],\n    setLatestMiddleware = _React$useState4[1];\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n  var referenceRef = React.useRef(null);\n  var floatingRef = React.useRef(null);\n  var dataRef = React.useRef(data);\n  var whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  var platformRef = useLatestRef(platform);\n  var _React$useState5 = React.useState(null),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    reference = _React$useState6[0],\n    _setReference = _React$useState6[1];\n  var _React$useState7 = React.useState(null),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    floating = _React$useState8[0],\n    _setFloating = _React$useState8[1];\n  var setReference = React.useCallback(function (node) {\n    if (referenceRef.current !== node) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, []);\n  var setFloating = React.useCallback(function (node) {\n    if (floatingRef.current !== node) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, []);\n  var update = React.useCallback(function () {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n    var config = {\n      placement: placement,\n      strategy: strategy,\n      middleware: latestMiddleware\n    };\n    if (platformRef.current) {\n      config.platform = platformRef.current;\n    }\n    computePosition(referenceRef.current, floatingRef.current, config).then(function (data) {\n      var fullData = _objectSpread({}, data, {\n        isPositioned: true\n      });\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n        dataRef.current = fullData;\n        ReactDOM.flushSync(function () {\n          setData(fullData);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy, platformRef]);\n  index(function () {\n    if (open === false && dataRef.current.isPositioned) {\n      dataRef.current.isPositioned = false;\n      setData(function (data) {\n        return _objectSpread({}, data, {\n          isPositioned: false\n        });\n      });\n    }\n  }, [open]);\n  var isMountedRef = React.useRef(false);\n  index(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  index(function () {\n    if (reference && floating) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(reference, floating, update);\n      } else {\n        update();\n      }\n    }\n  }, [reference, floating, update, whileElementsMountedRef]);\n  var refs = React.useMemo(function () {\n    return {\n      reference: referenceRef,\n      floating: floatingRef,\n      setReference: setReference,\n      setFloating: setFloating\n    };\n  }, [setReference, setFloating]);\n  var elements = React.useMemo(function () {\n    return {\n      reference: reference,\n      floating: floating\n    };\n  }, [reference, floating]);\n  return React.useMemo(function () {\n    return _objectSpread({}, data, {\n      update: update,\n      refs: refs,\n      elements: elements,\n      reference: setReference,\n      floating: setFloating\n    });\n  }, [data, update, refs, elements, setReference, setFloating]);\n}\nexport { arrow, useFloating };","map":null,"metadata":{},"sourceType":"module"}