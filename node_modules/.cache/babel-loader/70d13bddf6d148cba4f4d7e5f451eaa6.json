{"ast":null,"code":"'use client';\n\nimport { useLayoutEffect, useEffect } from 'react';\nfunction dispatchEvent(type, detail) {\n  window.dispatchEvent(new CustomEvent(type, {\n    detail: detail\n  }));\n}\nfunction validateFormName(name) {\n  if (!/^[0-9a-zA-Z-]+$/.test(name)) {\n    throw new Error(\"[@mantine/use-form] Form name \\\"\".concat(name, \"\\\" is invalid, it should contain only letters, numbers and dashes\"));\n  }\n}\nvar useIsomorphicEffect = typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\nfunction createFormActions(name) {\n  validateFormName(name);\n  var setFieldValue = function setFieldValue(path, value) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":set-field-value\"), {\n      path: path,\n      value: value\n    });\n  };\n  var setValues = function setValues(values) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":set-values\"), values);\n  };\n  var setInitialValues = function setInitialValues(values) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":set-initial-values\"), values);\n  };\n  var setErrors = function setErrors(errors) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":set-errors\"), errors);\n  };\n  var setFieldError = function setFieldError(path, error) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":set-field-error\"), {\n      path: path,\n      error: error\n    });\n  };\n  var clearFieldError = function clearFieldError(path) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":clear-field-error\"), path);\n  };\n  var clearErrors = function clearErrors() {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":clear-errors\"));\n  };\n  var reset = function reset() {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":reset\"));\n  };\n  var validate = function validate() {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":validate\"));\n  };\n  var validateField = function validateField(path) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":validate-field\"), path);\n  };\n  var reorderListItem = function reorderListItem(path, payload) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":reorder-list-item\"), {\n      path: path,\n      payload: payload\n    });\n  };\n  var removeListItem = function removeListItem(path, index) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":remove-list-item\"), {\n      path: path,\n      index: index\n    });\n  };\n  var insertListItem = function insertListItem(path, item, index) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":insert-list-item\"), {\n      path: path,\n      index: index,\n      item: item\n    });\n  };\n  var setDirty = function setDirty(value) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":set-dirty\"), value);\n  };\n  var setTouched = function setTouched(value) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":set-touched\"), value);\n  };\n  var resetDirty = function resetDirty(values) {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":reset-dirty\"), values);\n  };\n  var resetTouched = function resetTouched() {\n    return dispatchEvent(\"mantine-form:\".concat(name, \":reset-touched\"));\n  };\n  return {\n    setFieldValue: setFieldValue,\n    setValues: setValues,\n    setInitialValues: setInitialValues,\n    setErrors: setErrors,\n    setFieldError: setFieldError,\n    clearFieldError: clearFieldError,\n    clearErrors: clearErrors,\n    reset: reset,\n    validate: validate,\n    validateField: validateField,\n    reorderListItem: reorderListItem,\n    removeListItem: removeListItem,\n    insertListItem: insertListItem,\n    setDirty: setDirty,\n    setTouched: setTouched,\n    resetDirty: resetDirty,\n    resetTouched: resetTouched\n  };\n}\nfunction useFormEvent(eventKey, handler) {\n  useIsomorphicEffect(function () {\n    if (eventKey) {\n      window.addEventListener(eventKey, handler);\n      return function () {\n        return window.removeEventListener(eventKey, handler);\n      };\n    }\n    return void 0;\n  }, [eventKey]);\n}\nfunction useFormActions(name, form) {\n  if (name) {\n    validateFormName(name);\n  }\n  useFormEvent(\"mantine-form:\".concat(name, \":set-field-value\"), function (event) {\n    return form.setFieldValue(event.detail.path, event.detail.value);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":set-values\"), function (event) {\n    return form.setValues(event.detail);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":set-initial-values\"), function (event) {\n    return form.setInitialValues(event.detail);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":set-errors\"), function (event) {\n    return form.setErrors(event.detail);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":set-field-error\"), function (event) {\n    return form.setFieldError(event.detail.path, event.detail.error);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":clear-field-error\"), function (event) {\n    return form.clearFieldError(event.detail);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":clear-errors\"), form.clearErrors);\n  useFormEvent(\"mantine-form:\".concat(name, \":reset\"), form.reset);\n  useFormEvent(\"mantine-form:\".concat(name, \":validate\"), form.validate);\n  useFormEvent(\"mantine-form:\".concat(name, \":validate-field\"), function (event) {\n    return form.validateField(event.detail);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":reorder-list-item\"), function (event) {\n    return form.reorderListItem(event.detail.path, event.detail.payload);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":remove-list-item\"), function (event) {\n    return form.removeListItem(event.detail.path, event.detail.index);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":insert-list-item\"), function (event) {\n    return form.insertListItem(event.detail.path, event.detail.item, event.detail.index);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":set-dirty\"), function (event) {\n    return form.setDirty(event.detail);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":set-touched\"), function (event) {\n    return form.setTouched(event.detail);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":reset-dirty\"), function (event) {\n    return form.resetDirty(event.detail);\n  });\n  useFormEvent(\"mantine-form:\".concat(name, \":reset-touched\"), form.resetTouched);\n}\nexport { createFormActions, useFormActions, useIsomorphicEffect };","map":null,"metadata":{},"sourceType":"module"}