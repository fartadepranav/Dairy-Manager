{"ast":null,"code":"import { createStyles, getSize, rem } from '@mantine/styles';\nimport { sizes } from '../SliderRoot/SliderRoot.styles.js';\nvar useStyles = createStyles(function (theme, _ref, _ref2) {\n  var radius = _ref.radius,\n    color = _ref.color,\n    disabled = _ref.disabled,\n    inverted = _ref.inverted,\n    thumbSize = _ref.thumbSize;\n  var size = _ref2.size;\n  return {\n    trackContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\",\n      height: \"calc(\".concat(getSize({\n        sizes: sizes,\n        size: size\n      }), \" * 2)\"),\n      cursor: \"pointer\",\n      \"&:has(~ input:disabled)\": {\n        \"&\": {\n          pointerEvents: \"none\"\n        },\n        \"& .mantine-Slider-thumb\": {\n          display: \"none\"\n        },\n        \"& .mantine-Slider-track::before\": {\n          content: '\"\"',\n          backgroundColor: inverted ? theme.colorScheme === \"dark\" ? theme.colors.dark[3] : theme.colors.gray[4] : theme.colorScheme === \"dark\" ? theme.colors.dark[4] : theme.colors.gray[2]\n        },\n        \"& .mantine-Slider-bar\": {\n          backgroundColor: inverted ? theme.colorScheme === \"dark\" ? theme.colors.dark[4] : theme.colors.gray[2] : theme.colorScheme === \"dark\" ? theme.colors.dark[3] : theme.colors.gray[4]\n        }\n      }\n    },\n    track: {\n      position: \"relative\",\n      height: getSize({\n        sizes: sizes,\n        size: size\n      }),\n      width: \"100%\",\n      marginRight: thumbSize ? rem(thumbSize / 2) : getSize({\n        size: size,\n        sizes: sizes\n      }),\n      marginLeft: thumbSize ? rem(thumbSize / 2) : getSize({\n        size: size,\n        sizes: sizes\n      }),\n      \"&::before\": {\n        content: '\"\"',\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        borderRadius: theme.fn.radius(radius),\n        right: \"calc(\".concat(thumbSize ? rem(thumbSize / 2) : getSize({\n          size: size,\n          sizes: sizes\n        }), \" * -1)\"),\n        left: \"calc(\".concat(thumbSize ? rem(thumbSize / 2) : getSize({\n          size: size,\n          sizes: sizes\n        }), \" * -1)\"),\n        backgroundColor: inverted ? disabled ? theme.colorScheme === \"dark\" ? theme.colors.dark[3] : theme.colors.gray[4] : theme.fn.variant({\n          variant: \"filled\",\n          color: color\n        }).background : theme.colorScheme === \"dark\" ? theme.colors.dark[4] : theme.colors.gray[2],\n        zIndex: 0\n      }\n    },\n    bar: {\n      position: \"absolute\",\n      zIndex: 1,\n      top: 0,\n      bottom: 0,\n      backgroundColor: inverted ? theme.colorScheme === \"dark\" ? theme.colors.dark[4] : theme.colors.gray[2] : disabled ? theme.colorScheme === \"dark\" ? theme.colors.dark[3] : theme.colors.gray[4] : theme.fn.variant({\n        variant: \"filled\",\n        color: color\n      }).background,\n      borderRadius: theme.fn.radius(radius)\n    }\n  };\n});\nexport default useStyles;","map":null,"metadata":{},"sourceType":"module"}