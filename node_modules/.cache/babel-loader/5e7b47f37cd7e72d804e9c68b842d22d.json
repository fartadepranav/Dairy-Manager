{"ast":null,"code":"import { themeColor } from '../theme-color/theme-color.js';\nimport { primaryShade } from '../primary-shade/primary-shade.js';\nimport { getGradientColorStops } from './get-gradient-color-stops/get-gradient-color-stops.js';\nfunction linearGradient(deg) {\n  for (var _len = arguments.length, colors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    colors[_key - 1] = arguments[_key];\n  }\n  return \"linear-gradient(\".concat(deg, \"deg, \").concat(getGradientColorStops(colors), \")\");\n}\nfunction radialGradient() {\n  for (var _len2 = arguments.length, colors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    colors[_key2] = arguments[_key2];\n  }\n  return \"radial-gradient(circle, \".concat(getGradientColorStops(colors), \")\");\n}\nfunction gradient(theme) {\n  var getThemeColor = themeColor(theme);\n  var getPrimaryShade = primaryShade(theme);\n  return function (payload) {\n    var merged = {\n      from: (payload == null ? void 0 : payload.from) || theme.defaultGradient.from,\n      to: (payload == null ? void 0 : payload.to) || theme.defaultGradient.to,\n      deg: (payload == null ? void 0 : payload.deg) || theme.defaultGradient.deg\n    };\n    return \"linear-gradient(\".concat(merged.deg, \"deg, \").concat(getThemeColor(merged.from, getPrimaryShade(), false), \" 0%, \").concat(getThemeColor(merged.to, getPrimaryShade(), false), \" 100%)\");\n  };\n}\nexport { gradient, linearGradient, radialGradient };","map":null,"metadata":{},"sourceType":"module"}