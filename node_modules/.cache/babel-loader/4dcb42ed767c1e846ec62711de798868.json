{"ast":null,"code":"import _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport React, { forwardRef, useState, useRef, useEffect } from 'react';\nimport { clamp, assignRef, useMergedRef, useOs } from '@mantine/hooks';\nimport { rem, useComponentDefaultProps, getSize } from '@mantine/styles';\nimport { getInputMode } from './get-input-mode/get-input-mode.js';\nimport { Chevron } from './Chevron.js';\nimport useStyles, { CONTROL_SIZES } from './NumberInput.styles.js';\nimport { TextInput } from '../TextInput/TextInput.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return target;\n};\nvar defaultFormatter = function defaultFormatter(value) {\n  return value || \"\";\n};\nvar defaultParser = function defaultParser(num) {\n  if (num === \"-\") {\n    return num;\n  }\n  var tempNum = num;\n  if (tempNum[0] === \".\") {\n    tempNum = \"0\".concat(num);\n  }\n  var parsedNum = parseFloat(tempNum);\n  if (Number.isNaN(parsedNum)) {\n    return \"\";\n  }\n  return num;\n};\nvar CHEVRON_SIZES = {\n  xs: rem(10),\n  sm: rem(14),\n  md: rem(16),\n  lg: rem(18),\n  xl: rem(20)\n};\nvar defaultProps = {\n  step: 1,\n  hideControls: false,\n  size: \"sm\",\n  precision: 0,\n  noClampOnBlur: false,\n  removeTrailingZeros: false,\n  decimalSeparator: \".\",\n  formatter: defaultFormatter,\n  parser: defaultParser,\n  type: \"text\"\n};\nvar NumberInput = forwardRef(function (props, ref) {\n  var _a = useComponentDefaultProps(\"NumberInput\", defaultProps, props),\n    readOnly = _a.readOnly,\n    disabled = _a.disabled,\n    value = _a.value,\n    onChange = _a.onChange,\n    decimalSeparator = _a.decimalSeparator,\n    thousandsSeparator = _a.thousandsSeparator,\n    min = _a.min,\n    max = _a.max,\n    startValue = _a.startValue,\n    step = _a.step,\n    stepHoldInterval = _a.stepHoldInterval,\n    stepHoldDelay = _a.stepHoldDelay,\n    onFocus = _a.onFocus,\n    onBlur = _a.onBlur,\n    onKeyDown = _a.onKeyDown,\n    onKeyUp = _a.onKeyUp,\n    hideControls = _a.hideControls,\n    radius = _a.radius,\n    variant = _a.variant,\n    precision = _a.precision,\n    removeTrailingZeros = _a.removeTrailingZeros,\n    defaultValue = _a.defaultValue,\n    noClampOnBlur = _a.noClampOnBlur,\n    handlersRef = _a.handlersRef,\n    classNames = _a.classNames,\n    styles = _a.styles,\n    size = _a.size,\n    rightSection = _a.rightSection,\n    rightSectionWidth = _a.rightSectionWidth,\n    formatter = _a.formatter,\n    parser = _a.parser,\n    inputMode = _a.inputMode,\n    unstyled = _a.unstyled,\n    type = _a.type,\n    others = __objRest(_a, [\"readOnly\", \"disabled\", \"value\", \"onChange\", \"decimalSeparator\", \"thousandsSeparator\", \"min\", \"max\", \"startValue\", \"step\", \"stepHoldInterval\", \"stepHoldDelay\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onKeyUp\", \"hideControls\", \"radius\", \"variant\", \"precision\", \"removeTrailingZeros\", \"defaultValue\", \"noClampOnBlur\", \"handlersRef\", \"classNames\", \"styles\", \"size\", \"rightSection\", \"rightSectionWidth\", \"formatter\", \"parser\", \"inputMode\", \"unstyled\", \"type\"]);\n  var _useStyles = useStyles({\n      radius: radius\n    }, {\n      classNames: classNames,\n      styles: styles,\n      unstyled: unstyled,\n      name: \"NumberInput\",\n      variant: variant,\n      size: size\n    }),\n    classes = _useStyles.classes,\n    cx = _useStyles.cx;\n  var parsePrecision = function parsePrecision(val) {\n    if (val === \"\") return \"\";\n    var result = val.toFixed(precision);\n    if (removeTrailingZeros && precision > 0) {\n      result = result.replace(new RegExp(\"[0]{0,\".concat(precision, \"}$\")), \"\");\n      if (result.endsWith(\".\")) {\n        result = result.slice(0, -1);\n      }\n    }\n    return result;\n  };\n  var formatNum = function formatNum(val) {\n    var parsedStr = val;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(\".\", decimalSeparator);\n    }\n    return formatter(parsedStr);\n  };\n  var parseNum = function parseNum(val) {\n    var num = val;\n    if (decimalSeparator) {\n      num = num.replaceAll(thousandsSeparator, \"\").replace(decimalSeparator, \".\");\n    }\n    return parser(num);\n  };\n  var formatInternalValue = function formatInternalValue(val) {\n    return formatNum(parsePrecision(val));\n  };\n  var _useState = useState(typeof value === \"number\" ? value : typeof defaultValue === \"number\" ? defaultValue : \"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    internalValue = _useState2[0],\n    _setInternalValue = _useState2[1];\n  var _useState3 = useState(function () {\n      return formatInternalValue(internalValue);\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    inputValue = _useState4[0],\n    setInputValue = _useState4[1];\n  var inputRef = useRef();\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isFocussed = _useState6[0],\n    setIsFocussed = _useState6[1];\n  var setInternalValue = function setInternalValue(val, forceInputValueUpdate) {\n    if (!isFocussed || forceInputValueUpdate) {\n      var newInputValue = formatInternalValue(val);\n      if (newInputValue !== inputValue) {\n        setInputValue(newInputValue);\n      }\n    }\n    if (val !== internalValue) {\n      _setInternalValue(val);\n    }\n  };\n  var _min = typeof min === \"number\" ? min : -Infinity;\n  var _max = typeof max === \"number\" ? max : Infinity;\n  var incrementRef = useRef();\n  incrementRef.current = function () {\n    var _a2;\n    var newInternalValue;\n    if (internalValue === \"\") {\n      newInternalValue = (_a2 = startValue != null ? startValue : min) != null ? _a2 : 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue + step, _min, _max)));\n    }\n    setInternalValue(newInternalValue, true);\n    onChange == null ? void 0 : onChange(newInternalValue);\n  };\n  var decrementRef = useRef();\n  decrementRef.current = function () {\n    var _a2;\n    var newInternalValue;\n    if (internalValue === \"\") {\n      newInternalValue = (_a2 = startValue != null ? startValue : min) != null ? _a2 : 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue - step, _min, _max)));\n    }\n    setInternalValue(newInternalValue, true);\n    onChange == null ? void 0 : onChange(newInternalValue);\n  };\n  assignRef(handlersRef, {\n    increment: incrementRef.current,\n    decrement: decrementRef.current\n  });\n  useEffect(function () {\n    if (isFocussed) {\n      return;\n    }\n    if (value === void 0) {\n      setInternalValue(internalValue, true);\n    } else {\n      setInternalValue(value, true);\n    }\n  }, [value, isFocussed]);\n  var shouldUseStepInterval = stepHoldDelay !== void 0 && stepHoldInterval !== void 0;\n  var onStepTimeoutRef = useRef(null);\n  var stepCountRef = useRef(0);\n  var onStepDone = function onStepDone() {\n    if (onStepTimeoutRef.current) {\n      window.clearTimeout(onStepTimeoutRef.current);\n    }\n    onStepTimeoutRef.current = null;\n    stepCountRef.current = 0;\n  };\n  var onStepHandleChange = function onStepHandleChange(isIncrement) {\n    if (isIncrement) {\n      incrementRef.current();\n    } else {\n      decrementRef.current();\n    }\n    stepCountRef.current += 1;\n  };\n  var onStepLoop = function onStepLoop(isIncrement) {\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      var interval = typeof stepHoldInterval === \"number\" ? stepHoldInterval : stepHoldInterval(stepCountRef.current);\n      onStepTimeoutRef.current = window.setTimeout(function () {\n        return onStepLoop(isIncrement);\n      }, interval);\n    }\n  };\n  var onStep = function onStep(event, isIncrement) {\n    event.preventDefault();\n    inputRef.current.focus();\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      onStepTimeoutRef.current = window.setTimeout(function () {\n        return onStepLoop(isIncrement);\n      }, stepHoldDelay);\n    }\n  };\n  useEffect(function () {\n    onStepDone();\n    return onStepDone;\n  }, []);\n  var controls = /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.rightSection\n  }, /* @__PURE__ */React.createElement(\"button\", {\n    type: \"button\",\n    tabIndex: -1,\n    \"aria-hidden\": true,\n    disabled: internalValue >= max,\n    className: cx(classes.control, classes.controlUp),\n    onPointerDown: function onPointerDown(event) {\n      onStep(event, true);\n    },\n    onPointerUp: onStepDone,\n    onPointerLeave: onStepDone\n  }, /* @__PURE__ */React.createElement(Chevron, {\n    size: getSize({\n      size: size,\n      sizes: CHEVRON_SIZES\n    }),\n    direction: \"up\"\n  })), /* @__PURE__ */React.createElement(\"button\", {\n    type: \"button\",\n    tabIndex: -1,\n    \"aria-hidden\": true,\n    disabled: internalValue <= min,\n    className: cx(classes.control, classes.controlDown),\n    onPointerDown: function onPointerDown(event) {\n      onStep(event, false);\n    },\n    onPointerUp: onStepDone,\n    onPointerLeave: onStepDone\n  }, /* @__PURE__ */React.createElement(Chevron, {\n    size: getSize({\n      size: size,\n      sizes: CHEVRON_SIZES\n    }),\n    direction: \"down\"\n  })));\n  var processInputValue = function processInputValue(newInputValue) {\n    var normalizedInputValue = newInputValue;\n    if (normalizedInputValue[0] === \"\".concat(decimalSeparator) || normalizedInputValue[0] === \".\") {\n      normalizedInputValue = \"0\".concat(normalizedInputValue);\n    }\n    var parsedValue = parseFloat(parsePrecision(parseFloat(parseNum(normalizedInputValue))));\n    var clampedValue = !noClampOnBlur ? clamp(parsedValue, _min, _max) : parsedValue;\n    var finalValue = Number.isNaN(clampedValue) ? \"\" : clampedValue;\n    var internalValueChanged = internalValue !== finalValue;\n    setInputValue(newInputValue);\n    setInternalValue(finalValue);\n    if (internalValueChanged) {\n      onChange == null ? void 0 : onChange(finalValue);\n    }\n  };\n  var handleChange = function handleChange(event) {\n    var evt = event.nativeEvent;\n    if (evt.isComposing) {\n      return;\n    }\n    processInputValue(event.target.value);\n  };\n  var handleFocus = function handleFocus(event) {\n    setIsFocussed(true);\n    onFocus == null ? void 0 : onFocus(event);\n  };\n  var handleBlur = function handleBlur(event) {\n    setIsFocussed(false);\n    onBlur == null ? void 0 : onBlur(event);\n  };\n  var handleKeyDown = function handleKeyDown(event) {\n    typeof onKeyDown === \"function\" && onKeyDown(event);\n    if (event.repeat && shouldUseStepInterval && (event.key === \"ArrowUp\" || event.key === \"ArrowDown\")) {\n      event.preventDefault();\n      return;\n    }\n    if (!readOnly) {\n      if (event.key === \"ArrowUp\") {\n        onStep(event, true);\n      } else if (event.key === \"ArrowDown\") {\n        onStep(event, false);\n      }\n    }\n  };\n  var handleKeyUp = function handleKeyUp(event) {\n    typeof onKeyUp === \"function\" && onKeyUp(event);\n    if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n      onStepDone();\n    }\n  };\n  return /* @__PURE__ */React.createElement(TextInput, __spreadProps(__spreadValues({}, others), {\n    type: type,\n    variant: variant,\n    value: inputValue,\n    disabled: disabled,\n    readOnly: readOnly,\n    ref: useMergedRef(inputRef, ref),\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    rightSection: rightSection || (disabled || readOnly || hideControls || variant === \"unstyled\" ? null : controls),\n    rightSectionWidth: rightSectionWidth != null ? rightSectionWidth : \"calc(\".concat(getSize({\n      size: size,\n      sizes: CONTROL_SIZES\n    }), \" + \").concat(rem(1), \")\"),\n    radius: radius,\n    max: max,\n    min: min,\n    step: step,\n    size: size,\n    styles: styles,\n    classNames: classNames,\n    inputMode: inputMode || getInputMode(step, precision, useOs()),\n    __staticSelector: \"NumberInput\",\n    unstyled: unstyled\n  }));\n});\nNumberInput.displayName = \"@mantine/core/NumberInput\";\nexport { NumberInput };","map":null,"metadata":{},"sourceType":"module"}