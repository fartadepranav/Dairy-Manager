{"ast":null,"code":"import _defineProperty from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { getBreakpointValue, getSize } from '@mantine/styles';\nfunction getSortedKeys(value, theme) {\n  var sorted = Object.keys(value).filter(function (breakpoint) {\n    return breakpoint !== \"base\";\n  }).sort(function (a, b) {\n    return getBreakpointValue(getSize({\n      size: a,\n      sizes: theme.breakpoints\n    })) - getBreakpointValue(getSize({\n      size: b,\n      sizes: theme.breakpoints\n    }));\n  });\n  return \"base\" in value ? [\"base\"].concat(_toConsumableArray(sorted)) : sorted;\n}\nfunction getResponsiveValue(_ref) {\n  var value = _ref.value,\n    theme = _ref.theme,\n    getValue = _ref.getValue,\n    property = _ref.property;\n  if (value == null) {\n    return void 0;\n  }\n  if (typeof value === \"object\") {\n    var result = getSortedKeys(value, theme).reduce(function (acc, breakpointKey) {\n      if (breakpointKey === \"base\" && value.base !== void 0) {\n        var baseValue = getValue(value.base, theme);\n        if (Array.isArray(property)) {\n          property.forEach(function (prop) {\n            acc[prop] = baseValue;\n          });\n          return acc;\n        }\n        acc[property] = baseValue;\n        return acc;\n      }\n      var breakpointValue = getValue(value[breakpointKey], theme);\n      if (Array.isArray(property)) {\n        acc[theme.fn.largerThan(breakpointKey)] = {};\n        property.forEach(function (prop) {\n          acc[theme.fn.largerThan(breakpointKey)][prop] = breakpointValue;\n        });\n        return acc;\n      }\n      acc[theme.fn.largerThan(breakpointKey)] = _defineProperty({}, property, breakpointValue);\n      return acc;\n    }, {});\n    return result;\n  }\n  var cssValue = getValue(value, theme);\n  if (Array.isArray(property)) {\n    return property.reduce(function (acc, prop) {\n      acc[prop] = cssValue;\n      return acc;\n    }, {});\n  }\n  return _defineProperty({}, property, cssValue);\n}\nexport { getResponsiveValue };","map":null,"metadata":{},"sourceType":"module"}