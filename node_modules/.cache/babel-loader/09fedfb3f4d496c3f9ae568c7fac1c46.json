{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport { useReducedMotion } from '../use-reduced-motion/use-reduced-motion.js';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\nimport { easeInOutQuad } from './utils/ease-in-out-quad.js';\nimport { getRelativePosition } from './utils/get-relative-position.js';\nimport { getScrollStart } from './utils/get-scroll-start.js';\nimport { setScrollParam } from './utils/set-scroll-param.js';\nfunction useScrollIntoView() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$duration = _ref.duration,\n    duration = _ref$duration === void 0 ? 1250 : _ref$duration,\n    _ref$axis = _ref.axis,\n    axis = _ref$axis === void 0 ? \"y\" : _ref$axis,\n    onScrollFinish = _ref.onScrollFinish,\n    _ref$easing = _ref.easing,\n    easing = _ref$easing === void 0 ? easeInOutQuad : _ref$easing,\n    _ref$offset = _ref.offset,\n    offset = _ref$offset === void 0 ? 0 : _ref$offset,\n    _ref$cancelable = _ref.cancelable,\n    cancelable = _ref$cancelable === void 0 ? true : _ref$cancelable,\n    _ref$isList = _ref.isList,\n    isList = _ref$isList === void 0 ? false : _ref$isList;\n  var frameID = useRef(0);\n  var startTime = useRef(0);\n  var shouldStop = useRef(false);\n  var scrollableRef = useRef(null);\n  var targetRef = useRef(null);\n  var reducedMotion = useReducedMotion();\n  var cancel = function cancel() {\n    if (frameID.current) {\n      cancelAnimationFrame(frameID.current);\n    }\n  };\n  var scrollIntoView = useCallback(function () {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref2$alignment = _ref2.alignment,\n      alignment = _ref2$alignment === void 0 ? \"start\" : _ref2$alignment;\n    var _a;\n    shouldStop.current = false;\n    if (frameID.current) {\n      cancel();\n    }\n    var start = (_a = getScrollStart({\n      parent: scrollableRef.current,\n      axis: axis\n    })) != null ? _a : 0;\n    var change = getRelativePosition({\n      parent: scrollableRef.current,\n      target: targetRef.current,\n      axis: axis,\n      alignment: alignment,\n      offset: offset,\n      isList: isList\n    }) - (scrollableRef.current ? 0 : start);\n    function animateScroll() {\n      if (startTime.current === 0) {\n        startTime.current = performance.now();\n      }\n      var now = performance.now();\n      var elapsed = now - startTime.current;\n      var t = reducedMotion || duration === 0 ? 1 : elapsed / duration;\n      var distance = start + change * easing(t);\n      setScrollParam({\n        parent: scrollableRef.current,\n        axis: axis,\n        distance: distance\n      });\n      if (!shouldStop.current && t < 1) {\n        frameID.current = requestAnimationFrame(animateScroll);\n      } else {\n        typeof onScrollFinish === \"function\" && onScrollFinish();\n        startTime.current = 0;\n        frameID.current = 0;\n        cancel();\n      }\n    }\n    animateScroll();\n  }, [axis, duration, easing, isList, offset, onScrollFinish, reducedMotion]);\n  var handleStop = function handleStop() {\n    if (cancelable) {\n      shouldStop.current = true;\n    }\n  };\n  useWindowEvent(\"wheel\", handleStop, {\n    passive: true\n  });\n  useWindowEvent(\"touchmove\", handleStop, {\n    passive: true\n  });\n  useEffect(function () {\n    return cancel;\n  }, []);\n  return {\n    scrollableRef: scrollableRef,\n    targetRef: targetRef,\n    scrollIntoView: scrollIntoView,\n    cancel: cancel\n  };\n}\nexport { useScrollIntoView };","map":null,"metadata":{},"sourceType":"module"}