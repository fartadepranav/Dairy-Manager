{"ast":null,"code":"import _toConsumableArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nfunction useQueue(_ref) {\n  var _ref$initialValues = _ref.initialValues,\n    initialValues = _ref$initialValues === void 0 ? [] : _ref$initialValues,\n    limit = _ref.limit;\n  var _useState = useState({\n      state: initialValues.slice(0, limit),\n      queue: initialValues.slice(limit)\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    _useState2$ = _useState2[0],\n    state = _useState2$.state,\n    queue = _useState2$.queue,\n    setState = _useState2[1];\n  var add = function add() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n    return setState(function (current) {\n      var results = [].concat(_toConsumableArray(current.state), _toConsumableArray(current.queue), items);\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n  var update = function update(fn) {\n    return setState(function (current) {\n      var results = fn([].concat(_toConsumableArray(current.state), _toConsumableArray(current.queue)));\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n  var cleanQueue = function cleanQueue() {\n    return setState(function (current) {\n      return {\n        state: current.state,\n        queue: []\n      };\n    });\n  };\n  return {\n    state: state,\n    queue: queue,\n    add: add,\n    update: update,\n    cleanQueue: cleanQueue\n  };\n}\nexport { useQueue };","map":null,"metadata":{},"sourceType":"module"}