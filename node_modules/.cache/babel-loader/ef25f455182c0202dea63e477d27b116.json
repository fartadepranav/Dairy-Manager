{"ast":null,"code":"import { useRef } from 'react';\nimport { useDidUpdate } from '../use-did-update/use-did-update.js';\nfunction useFocusReturn(_ref) {\n  var opened = _ref.opened,\n    _ref$shouldReturnFocu = _ref.shouldReturnFocus,\n    shouldReturnFocus = _ref$shouldReturnFocu === void 0 ? true : _ref$shouldReturnFocu;\n  var lastActiveElement = useRef();\n  var returnFocus = function returnFocus() {\n    var _a;\n    if (lastActiveElement.current && \"focus\" in lastActiveElement.current && typeof lastActiveElement.current.focus === \"function\") {\n      (_a = lastActiveElement.current) == null ? void 0 : _a.focus({\n        preventScroll: true\n      });\n    }\n  };\n  useDidUpdate(function () {\n    var timeout = -1;\n    var clearFocusTimeout = function clearFocusTimeout(event) {\n      if (event.key === \"Tab\") {\n        window.clearTimeout(timeout);\n      }\n    };\n    document.addEventListener(\"keydown\", clearFocusTimeout);\n    if (opened) {\n      lastActiveElement.current = document.activeElement;\n    } else if (shouldReturnFocus) {\n      timeout = window.setTimeout(returnFocus, 10);\n    }\n    return function () {\n      window.clearTimeout(timeout);\n      document.removeEventListener(\"keydown\", clearFocusTimeout);\n    };\n  }, [opened, shouldReturnFocus]);\n  return returnFocus;\n}\nexport { useFocusReturn };","map":null,"metadata":{},"sourceType":"module"}