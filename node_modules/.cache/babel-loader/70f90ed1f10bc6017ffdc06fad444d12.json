{"ast":null,"code":"import _toConsumableArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled.js';\nimport { range } from '../utils/range/range.js';\nvar DOTS = \"dots\";\nfunction usePagination(_ref) {\n  var total = _ref.total,\n    _ref$siblings = _ref.siblings,\n    siblings = _ref$siblings === void 0 ? 1 : _ref$siblings,\n    _ref$boundaries = _ref.boundaries,\n    boundaries = _ref$boundaries === void 0 ? 1 : _ref$boundaries,\n    page = _ref.page,\n    _ref$initialPage = _ref.initialPage,\n    initialPage = _ref$initialPage === void 0 ? 1 : _ref$initialPage,\n    onChange = _ref.onChange;\n  var _total = Math.max(Math.trunc(total), 0);\n  var _useUncontrolled = useUncontrolled({\n      value: page,\n      onChange: onChange,\n      defaultValue: initialPage,\n      finalValue: initialPage\n    }),\n    _useUncontrolled2 = _slicedToArray(_useUncontrolled, 2),\n    activePage = _useUncontrolled2[0],\n    setActivePage = _useUncontrolled2[1];\n  var setPage = function setPage(pageNumber) {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > _total) {\n      setActivePage(_total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n  var next = function next() {\n    return setPage(activePage + 1);\n  };\n  var previous = function previous() {\n    return setPage(activePage - 1);\n  };\n  var first = function first() {\n    return setPage(1);\n  };\n  var last = function last() {\n    return setPage(_total);\n  };\n  var paginationRange = useMemo(function () {\n    var totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n    if (totalPageNumbers >= _total) {\n      return range(1, _total);\n    }\n    var leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    var rightSiblingIndex = Math.min(activePage + siblings, _total - boundaries);\n    var shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    var shouldShowRightDots = rightSiblingIndex < _total - (boundaries + 1);\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      var leftItemCount = siblings * 2 + boundaries + 2;\n      return [].concat(_toConsumableArray(range(1, leftItemCount)), [DOTS], _toConsumableArray(range(_total - (boundaries - 1), _total)));\n    }\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      var rightItemCount = boundaries + 1 + 2 * siblings;\n      return [].concat(_toConsumableArray(range(1, boundaries)), [DOTS], _toConsumableArray(range(_total - rightItemCount, _total)));\n    }\n    return [].concat(_toConsumableArray(range(1, boundaries)), [DOTS], _toConsumableArray(range(leftSiblingIndex, rightSiblingIndex)), [DOTS], _toConsumableArray(range(_total - boundaries + 1, _total)));\n  }, [_total, siblings, activePage]);\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage: setPage,\n    next: next,\n    previous: previous,\n    first: first,\n    last: last\n  };\n}\nexport { DOTS, usePagination };","map":null,"metadata":{},"sourceType":"module"}