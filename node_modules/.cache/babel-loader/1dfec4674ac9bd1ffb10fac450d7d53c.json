{"ast":null,"code":"import _defineProperty from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { forwardRef, useState } from 'react';\nimport useStyles from './Thumb.styles.js';\nimport { Box } from '../../Box/Box.js';\nimport { Transition } from '../../Transition/Transition.js';\nvar Thumb = forwardRef(function (_ref, ref) {\n  var max = _ref.max,\n    min = _ref.min,\n    value = _ref.value,\n    position = _ref.position,\n    label = _ref.label,\n    dragging = _ref.dragging,\n    onMouseDown = _ref.onMouseDown,\n    onKeyDownCapture = _ref.onKeyDownCapture,\n    color = _ref.color,\n    classNames = _ref.classNames,\n    styles = _ref.styles,\n    size = _ref.size,\n    labelTransition = _ref.labelTransition,\n    labelTransitionDuration = _ref.labelTransitionDuration,\n    labelTransitionTimingFunction = _ref.labelTransitionTimingFunction,\n    labelAlwaysOn = _ref.labelAlwaysOn,\n    thumbLabel = _ref.thumbLabel,\n    _onFocus = _ref.onFocus,\n    _onBlur = _ref.onBlur,\n    showLabelOnHover = _ref.showLabelOnHover,\n    isHovered = _ref.isHovered,\n    _ref$children = _ref.children,\n    children = _ref$children === void 0 ? null : _ref$children,\n    disabled = _ref.disabled,\n    unstyled = _ref.unstyled,\n    thumbSize = _ref.thumbSize,\n    variant = _ref.variant;\n  var _useStyles = useStyles({\n      color: color,\n      disabled: disabled,\n      thumbSize: thumbSize\n    }, {\n      name: \"Slider\",\n      classNames: classNames,\n      styles: styles,\n      unstyled: unstyled,\n      variant: variant,\n      size: size\n    }),\n    classes = _useStyles.classes,\n    cx = _useStyles.cx,\n    theme = _useStyles.theme;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    focused = _useState2[0],\n    setFocused = _useState2[1];\n  var isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover && isHovered;\n  return /* @__PURE__ */React.createElement(Box, {\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref: ref,\n    className: cx(classes.thumb, _defineProperty({}, classes.dragging, dragging)),\n    onFocus: function onFocus() {\n      setFocused(true);\n      typeof _onFocus === \"function\" && _onFocus();\n    },\n    onBlur: function onBlur() {\n      setFocused(false);\n      typeof _onBlur === \"function\" && _onBlur();\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown: onMouseDown,\n    onKeyDownCapture: onKeyDownCapture,\n    onClick: function onClick(event) {\n      return event.stopPropagation();\n    },\n    style: _defineProperty({}, theme.dir === \"rtl\" ? \"right\" : \"left\", \"\".concat(position, \"%\"))\n  }, children, /* @__PURE__ */React.createElement(Transition, {\n    mounted: label != null && isVisible,\n    duration: labelTransitionDuration,\n    transition: labelTransition,\n    timingFunction: labelTransitionTimingFunction || theme.transitionTimingFunction\n  }, function (transitionStyles) {\n    return /* @__PURE__ */React.createElement(\"div\", {\n      style: transitionStyles,\n      className: classes.label\n    }, label);\n  }));\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":null,"metadata":{},"sourceType":"module"}