{"ast":null,"code":"import { useCallback as $3vqmr$useCallback } from \"react\";\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction $6ed0406888f73fc4$var$setRef(ref, value) {\n  if (typeof ref === 'function') ref(value);else if (ref !== null && ref !== undefined) ref.current = value;\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction $6ed0406888f73fc4$export$43e446d32b3d21af() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return function (node) {\n    return refs.forEach(function (ref) {\n      return $6ed0406888f73fc4$var$setRef(ref, node);\n    });\n  };\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction $6ed0406888f73fc4$export$c7b2cbe3552a0d05() {\n  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    refs[_key2] = arguments[_key2];\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return $3vqmr$useCallback($6ed0406888f73fc4$export$43e446d32b3d21af.apply(void 0, refs), refs);\n}\nexport { $6ed0406888f73fc4$export$43e446d32b3d21af as composeRefs, $6ed0406888f73fc4$export$c7b2cbe3552a0d05 as useComposedRefs };","map":null,"metadata":{},"sourceType":"module"}