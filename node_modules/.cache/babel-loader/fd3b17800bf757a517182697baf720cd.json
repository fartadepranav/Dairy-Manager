{"ast":null,"code":"import _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useEffect } from 'react';\nimport { getHotkeyMatcher } from './parse-hotkey.js';\nexport { getHotkeyHandler } from './parse-hotkey.js';\nfunction shouldFireEvent(event, tagsToIgnore) {\n  var triggerOnContentEditable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (event.target instanceof HTMLElement) {\n    if (triggerOnContentEditable) {\n      return !tagsToIgnore.includes(event.target.tagName);\n    }\n    return !event.target.isContentEditable && !tagsToIgnore.includes(event.target.tagName);\n  }\n  return true;\n}\nfunction useHotkeys(hotkeys) {\n  var tagsToIgnore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\"INPUT\", \"TEXTAREA\", \"SELECT\"];\n  var triggerOnContentEditable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  useEffect(function () {\n    var keydownListener = function keydownListener(event) {\n      hotkeys.forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 3),\n          hotkey = _ref2[0],\n          handler = _ref2[1],\n          _ref2$ = _ref2[2],\n          options = _ref2$ === void 0 ? {\n            preventDefault: true\n          } : _ref2$;\n        if (getHotkeyMatcher(hotkey)(event) && shouldFireEvent(event, tagsToIgnore, triggerOnContentEditable)) {\n          if (options.preventDefault) {\n            event.preventDefault();\n          }\n          handler(event);\n        }\n      });\n    };\n    document.documentElement.addEventListener(\"keydown\", keydownListener);\n    return function () {\n      return document.documentElement.removeEventListener(\"keydown\", keydownListener);\n    };\n  }, [hotkeys]);\n}\nexport { useHotkeys };","map":null,"metadata":{},"sourceType":"module"}