{"ast":null,"code":"import _defineProperty from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { useState, useRef, useCallback } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { filterErrors } from './filter-errors/filter-errors.js';\nimport { clearListState } from './lists/clear-list-state.js';\nimport { shouldValidateOnChange } from './validate/should-validate-on-change.js';\nimport { setPath } from './paths/set-path.js';\nimport { validateFieldValue } from './validate/validate-field-value.js';\nimport { reorderPath } from './paths/reorder-path.js';\nimport { reorderErrors } from './lists/reorder-errors.js';\nimport { removePath } from './paths/remove-path.js';\nimport { changeErrorIndices } from './lists/change-error-indices.js';\nimport { insertPath } from './paths/insert-path.js';\nimport { validateValues } from './validate/validate-values.js';\nimport { getStatus } from './get-status/get-status.js';\nimport { getPath } from './paths/get-path.js';\nimport { getInputOnChange } from './get-input-on-change/get-input-on-change.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nfunction useForm() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$initialValues = _ref.initialValues,\n    initialValues = _ref$initialValues === void 0 ? {} : _ref$initialValues,\n    _ref$initialErrors = _ref.initialErrors,\n    initialErrors = _ref$initialErrors === void 0 ? {} : _ref$initialErrors,\n    _ref$initialDirty = _ref.initialDirty,\n    initialDirty = _ref$initialDirty === void 0 ? {} : _ref$initialDirty,\n    _ref$initialTouched = _ref.initialTouched,\n    initialTouched = _ref$initialTouched === void 0 ? {} : _ref$initialTouched,\n    _ref$clearInputErrorO = _ref.clearInputErrorOnChange,\n    clearInputErrorOnChange = _ref$clearInputErrorO === void 0 ? true : _ref$clearInputErrorO,\n    _ref$validateInputOnC = _ref.validateInputOnChange,\n    validateInputOnChange = _ref$validateInputOnC === void 0 ? false : _ref$validateInputOnC,\n    _ref$validateInputOnB = _ref.validateInputOnBlur,\n    validateInputOnBlur = _ref$validateInputOnB === void 0 ? false : _ref$validateInputOnB,\n    _ref$transformValues = _ref.transformValues,\n    transformValues = _ref$transformValues === void 0 ? function (values) {\n      return values;\n    } : _ref$transformValues,\n    rules = _ref.validate;\n  var _useState = useState(initialTouched),\n    _useState2 = _slicedToArray(_useState, 2),\n    touched = _useState2[0],\n    setTouched = _useState2[1];\n  var _useState3 = useState(initialDirty),\n    _useState4 = _slicedToArray(_useState3, 2),\n    dirty = _useState4[0],\n    setDirty = _useState4[1];\n  var _useState5 = useState(initialValues),\n    _useState6 = _slicedToArray(_useState5, 2),\n    values = _useState6[0],\n    _setValues = _useState6[1];\n  var _useState7 = useState(filterErrors(initialErrors)),\n    _useState8 = _slicedToArray(_useState7, 2),\n    errors = _useState8[0],\n    _setErrors = _useState8[1];\n  var valuesSnapshot = useRef(initialValues);\n  var setValuesSnapshot = function setValuesSnapshot(_values) {\n    valuesSnapshot.current = _values;\n  };\n  var resetTouched = useCallback(function () {\n    return setTouched({});\n  }, []);\n  var resetDirty = function resetDirty(_values) {\n    var newSnapshot = _values ? __spreadValues(__spreadValues({}, values), _values) : values;\n    setValuesSnapshot(newSnapshot);\n    setDirty({});\n  };\n  var setErrors = useCallback(function (errs) {\n    return _setErrors(function (current) {\n      return filterErrors(typeof errs === \"function\" ? errs(current) : errs);\n    });\n  }, []);\n  var clearErrors = useCallback(function () {\n    return _setErrors({});\n  }, []);\n  var reset = useCallback(function () {\n    _setValues(initialValues);\n    clearErrors();\n    setValuesSnapshot(initialValues);\n    setDirty({});\n    resetTouched();\n  }, []);\n  var setFieldError = useCallback(function (path, error) {\n    return setErrors(function (current) {\n      return __spreadProps(__spreadValues({}, current), _defineProperty({}, path, error));\n    });\n  }, []);\n  var clearFieldError = useCallback(function (path) {\n    return setErrors(function (current) {\n      if (typeof path !== \"string\") {\n        return current;\n      }\n      var clone = __spreadValues({}, current);\n      delete clone[path];\n      return clone;\n    });\n  }, []);\n  var clearFieldDirty = useCallback(function (path) {\n    return setDirty(function (current) {\n      if (typeof path !== \"string\") {\n        return current;\n      }\n      var result = clearListState(path, current);\n      delete result[path];\n      return result;\n    });\n  }, []);\n  var setFieldValue = useCallback(function (path, value) {\n    var shouldValidate = shouldValidateOnChange(path, validateInputOnChange);\n    clearFieldDirty(path);\n    setTouched(function (currentTouched) {\n      return __spreadProps(__spreadValues({}, currentTouched), _defineProperty({}, path, true));\n    });\n    _setValues(function (current) {\n      var result = setPath(path, value, current);\n      if (shouldValidate) {\n        var validationResults = validateFieldValue(path, rules, result);\n        validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);\n      }\n      return result;\n    });\n    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);\n  }, []);\n  var setValues = useCallback(function (payload) {\n    _setValues(function (currentValues) {\n      var valuesPartial = typeof payload === \"function\" ? payload(currentValues) : payload;\n      return __spreadValues(__spreadValues({}, currentValues), valuesPartial);\n    });\n    clearInputErrorOnChange && clearErrors();\n  }, []);\n  var reorderListItem = useCallback(function (path, payload) {\n    clearFieldDirty(path);\n    _setValues(function (current) {\n      return reorderPath(path, payload, current);\n    });\n    _setErrors(function (errs) {\n      return reorderErrors(path, payload, errs);\n    });\n  }, []);\n  var removeListItem = useCallback(function (path, index) {\n    clearFieldDirty(path);\n    _setValues(function (current) {\n      return removePath(path, index, current);\n    });\n    _setErrors(function (errs) {\n      return changeErrorIndices(path, index, errs, -1);\n    });\n  }, []);\n  var insertListItem = useCallback(function (path, item, index) {\n    clearFieldDirty(path);\n    _setValues(function (current) {\n      return insertPath(path, item, index, current);\n    });\n    _setErrors(function (errs) {\n      return changeErrorIndices(path, index, errs, 1);\n    });\n  }, []);\n  var validate = useCallback(function () {\n    var results = validateValues(rules, values);\n    _setErrors(results.errors);\n    return results;\n  }, [values, rules]);\n  var validateField = useCallback(function (path) {\n    var results = validateFieldValue(path, rules, values);\n    results.hasError ? setFieldError(path, results.error) : clearFieldError(path);\n    return results;\n  }, [values, rules]);\n  var getInputProps = function getInputProps(path) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$type = _ref2.type,\n      type = _ref2$type === void 0 ? \"input\" : _ref2$type,\n      _ref2$withError = _ref2.withError,\n      withError = _ref2$withError === void 0 ? true : _ref2$withError,\n      _ref2$withFocus = _ref2.withFocus,\n      withFocus = _ref2$withFocus === void 0 ? true : _ref2$withFocus;\n    var onChange = getInputOnChange(function (value) {\n      return setFieldValue(path, value);\n    });\n    var payload = {\n      onChange: onChange\n    };\n    if (withError) {\n      payload.error = errors[path];\n    }\n    if (type === \"checkbox\") {\n      payload.checked = getPath(path, values);\n    } else {\n      payload.value = getPath(path, values);\n    }\n    if (withFocus) {\n      payload.onFocus = function () {\n        return setTouched(function (current) {\n          return __spreadProps(__spreadValues({}, current), _defineProperty({}, path, true));\n        });\n      };\n      payload.onBlur = function () {\n        if (shouldValidateOnChange(path, validateInputOnBlur)) {\n          var validationResults = validateFieldValue(path, rules, values);\n          validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);\n        }\n      };\n    }\n    return payload;\n  };\n  var onSubmit = function onSubmit(handleSubmit, handleValidationFailure) {\n    return function (event) {\n      event == null ? void 0 : event.preventDefault();\n      var results = validate();\n      if (results.hasErrors) {\n        handleValidationFailure == null ? void 0 : handleValidationFailure(results.errors, values, event);\n      } else {\n        handleSubmit == null ? void 0 : handleSubmit(transformValues(values), event);\n      }\n    };\n  };\n  var getTransformedValues = function getTransformedValues(input) {\n    return transformValues(input || values);\n  };\n  var onReset = useCallback(function (event) {\n    event.preventDefault();\n    reset();\n  }, []);\n  var isDirty = function isDirty(path) {\n    if (path) {\n      var overriddenValue = getPath(path, dirty);\n      if (typeof overriddenValue === \"boolean\") {\n        return overriddenValue;\n      }\n      var sliceOfValues = getPath(path, values);\n      var sliceOfInitialValues = getPath(path, valuesSnapshot.current);\n      return !isEqual(sliceOfValues, sliceOfInitialValues);\n    }\n    var isOverridden = Object.keys(dirty).length > 0;\n    if (isOverridden) {\n      return getStatus(dirty);\n    }\n    return !isEqual(values, valuesSnapshot.current);\n  };\n  var isTouched = useCallback(function (path) {\n    return getStatus(touched, path);\n  }, [touched]);\n  var isValid = useCallback(function (path) {\n    return path ? !validateFieldValue(path, rules, values).hasError : !validateValues(rules, values).hasErrors;\n  }, [values, rules]);\n  return {\n    values: values,\n    errors: errors,\n    setValues: setValues,\n    setErrors: setErrors,\n    setFieldValue: setFieldValue,\n    setFieldError: setFieldError,\n    clearFieldError: clearFieldError,\n    clearErrors: clearErrors,\n    reset: reset,\n    validate: validate,\n    validateField: validateField,\n    reorderListItem: reorderListItem,\n    removeListItem: removeListItem,\n    insertListItem: insertListItem,\n    getInputProps: getInputProps,\n    onSubmit: onSubmit,\n    onReset: onReset,\n    isDirty: isDirty,\n    isTouched: isTouched,\n    setTouched: setTouched,\n    setDirty: setDirty,\n    resetTouched: resetTouched,\n    resetDirty: resetDirty,\n    isValid: isValid,\n    getTransformedValues: getTransformedValues\n  };\n}\nexport { useForm };","map":null,"metadata":{},"sourceType":"module"}