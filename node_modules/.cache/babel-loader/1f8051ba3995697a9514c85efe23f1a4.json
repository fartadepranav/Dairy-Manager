{"ast":null,"code":"import _toConsumableArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nfunction groupOptions(_ref) {\n  var data = _ref.data;\n  var sortedData = [];\n  var unGroupedData = [];\n  var groupedData = data.reduce(function (acc, item, index) {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n    return acc;\n  }, {});\n  Object.keys(groupedData).forEach(function (groupName) {\n    sortedData.push.apply(sortedData, _toConsumableArray(groupedData[groupName].map(function (index) {\n      return data[index];\n    })));\n  });\n  sortedData.push.apply(sortedData, _toConsumableArray(unGroupedData.map(function (itemIndex) {\n    return data[itemIndex];\n  })));\n  return sortedData;\n}\nfunction getGroupedOptions(data) {\n  var sorted = groupOptions({\n    data: data\n  });\n  var unGrouped = [];\n  var grouped = [];\n  var groupName = null;\n  sorted.forEach(function (item, index) {\n    if (!item.group) {\n      unGrouped.push({\n        type: \"item\",\n        item: item,\n        index: index\n      });\n    } else {\n      if (groupName !== item.group) {\n        groupName = item.group;\n        grouped.push({\n          type: \"label\",\n          label: groupName\n        });\n      }\n      grouped.push({\n        type: \"item\",\n        item: item,\n        index: index\n      });\n    }\n  });\n  return {\n    grouped: grouped,\n    unGrouped: unGrouped,\n    items: [].concat(grouped, unGrouped),\n    hasItems: grouped.length > 0 || unGrouped.length > 0\n  };\n}\nexport { getGroupedOptions, groupOptions };","map":null,"metadata":{},"sourceType":"module"}