{"ast":null,"code":"import _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nfunction useClipboard() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$timeout = _ref.timeout,\n    timeout = _ref$timeout === void 0 ? 2e3 : _ref$timeout;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    error = _useState2[0],\n    setError = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    copied = _useState4[0],\n    setCopied = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    copyTimeout = _useState6[0],\n    setCopyTimeout = _useState6[1];\n  var handleCopyResult = function handleCopyResult(value) {\n    clearTimeout(copyTimeout);\n    setCopyTimeout(setTimeout(function () {\n      return setCopied(false);\n    }, timeout));\n    setCopied(value);\n  };\n  var copy = function copy(valueToCopy) {\n    if (\"clipboard\" in navigator) {\n      navigator.clipboard.writeText(valueToCopy).then(function () {\n        return handleCopyResult(true);\n      }).catch(function (err) {\n        return setError(err);\n      });\n    } else {\n      setError(new Error(\"useClipboard: navigator.clipboard is not supported\"));\n    }\n  };\n  var reset = function reset() {\n    setCopied(false);\n    setError(null);\n    clearTimeout(copyTimeout);\n  };\n  return {\n    copy: copy,\n    reset: reset,\n    error: error,\n    copied: copied\n  };\n}\nexport { useClipboard };","map":null,"metadata":{},"sourceType":"module"}