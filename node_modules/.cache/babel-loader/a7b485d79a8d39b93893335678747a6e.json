{"ast":null,"code":"import _toConsumableArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useUncontrolled, useDidUpdate } from '@mantine/hooks';\nimport { useFloating, size, offset, shift, limitShift, flip, inline, arrow } from '@floating-ui/react';\nimport { useFloatingAutoUpdate } from '../Floating/use-floating-auto-update.js';\nfunction getPopoverMiddlewares(options) {\n  var middlewares = [offset(options.offset)];\n  if (options.middlewares.shift) {\n    middlewares.push(shift({\n      limiter: limitShift()\n    }));\n  }\n  if (options.middlewares.flip) {\n    middlewares.push(flip());\n  }\n  if (options.middlewares.inline) {\n    middlewares.push(inline());\n  }\n  middlewares.push(arrow({\n    element: options.arrowRef,\n    padding: options.arrowOffset\n  }));\n  return middlewares;\n}\nfunction usePopover(options) {\n  var _useUncontrolled = useUncontrolled({\n      value: options.opened,\n      defaultValue: options.defaultOpened,\n      finalValue: false,\n      onChange: options.onChange\n    }),\n    _useUncontrolled2 = _slicedToArray(_useUncontrolled, 2),\n    _opened = _useUncontrolled2[0],\n    setOpened = _useUncontrolled2[1];\n  var onClose = function onClose() {\n    var _a;\n    (_a = options.onClose) == null ? void 0 : _a.call(options);\n    setOpened(false);\n  };\n  var onToggle = function onToggle() {\n    var _a, _b;\n    if (_opened) {\n      (_a = options.onClose) == null ? void 0 : _a.call(options);\n      setOpened(false);\n    } else {\n      (_b = options.onOpen) == null ? void 0 : _b.call(options);\n      setOpened(true);\n    }\n  };\n  var floating = useFloating({\n    placement: options.position,\n    middleware: [].concat(_toConsumableArray(getPopoverMiddlewares(options)), _toConsumableArray(options.width === \"target\" ? [size({\n      apply: function apply(_ref) {\n        var rects = _ref.rects;\n        var _a, _b;\n        Object.assign((_b = (_a = floating.refs.floating.current) == null ? void 0 : _a.style) != null ? _b : {}, {\n          width: \"\".concat(rects.reference.width, \"px\")\n        });\n      }\n    })] : []))\n  });\n  useFloatingAutoUpdate({\n    opened: options.opened,\n    position: options.position,\n    positionDependencies: options.positionDependencies,\n    floating: floating\n  });\n  useDidUpdate(function () {\n    var _a;\n    (_a = options.onPositionChange) == null ? void 0 : _a.call(options, floating.placement);\n  }, [floating.placement]);\n  useDidUpdate(function () {\n    var _a, _b;\n    if (!options.opened) {\n      (_a = options.onClose) == null ? void 0 : _a.call(options);\n    } else {\n      (_b = options.onOpen) == null ? void 0 : _b.call(options);\n    }\n  }, [options.opened]);\n  return {\n    floating: floating,\n    controlled: typeof options.opened === \"boolean\",\n    opened: _opened,\n    onClose: onClose,\n    onToggle: onToggle\n  };\n}\nexport { usePopover };","map":null,"metadata":{},"sourceType":"module"}