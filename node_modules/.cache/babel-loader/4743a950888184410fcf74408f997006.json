{"ast":null,"code":"export function klona(x) {\n  if (typeof x !== 'object') return x;\n  var k,\n    tmp,\n    str = Object.prototype.toString.call(x);\n  if (str === '[object Object]') {\n    if (x.constructor !== Object && typeof x.constructor === 'function') {\n      tmp = new x.constructor();\n      for (k in x) {\n        if (x.hasOwnProperty(k) && tmp[k] !== x[k]) {\n          tmp[k] = klona(x[k]);\n        }\n      }\n    } else {\n      tmp = {}; // null\n      for (k in x) {\n        if (k === '__proto__') {\n          Object.defineProperty(tmp, k, {\n            value: klona(x[k]),\n            configurable: true,\n            enumerable: true,\n            writable: true\n          });\n        } else {\n          tmp[k] = klona(x[k]);\n        }\n      }\n    }\n    return tmp;\n  }\n  if (str === '[object Array]') {\n    k = x.length;\n    for (tmp = Array(k); k--;) {\n      tmp[k] = klona(x[k]);\n    }\n    return tmp;\n  }\n  if (str === '[object Set]') {\n    tmp = new Set();\n    x.forEach(function (val) {\n      tmp.add(klona(val));\n    });\n    return tmp;\n  }\n  if (str === '[object Map]') {\n    tmp = new Map();\n    x.forEach(function (val, key) {\n      tmp.set(klona(key), klona(val));\n    });\n    return tmp;\n  }\n  if (str === '[object Date]') {\n    return new Date(+x);\n  }\n  if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n    tmp.lastIndex = x.lastIndex;\n    return tmp;\n  }\n  if (str === '[object DataView]') {\n    return new x.constructor(klona(x.buffer));\n  }\n  if (str === '[object ArrayBuffer]') {\n    return x.slice(0);\n  }\n\n  // ArrayBuffer.isView(x)\n  // ~> `new` bcuz `Buffer.slice` => ref\n  if (str.slice(-6) === 'Array]') {\n    return new x.constructor(x);\n  }\n  return x;\n}","map":null,"metadata":{},"sourceType":"module"}