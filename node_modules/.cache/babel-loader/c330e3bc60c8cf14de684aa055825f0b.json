{"ast":null,"code":"import { createStyles, rem, getSize } from '@mantine/styles';\nvar sizes = {\n  xs: rem(1),\n  sm: rem(2),\n  md: rem(3),\n  lg: rem(4),\n  xl: rem(5)\n};\nfunction getColor(theme, color) {\n  var themeColor = theme.fn.variant({\n    variant: \"outline\",\n    color: color\n  }).border;\n  return typeof color === \"string\" && (color in theme.colors || color.split(\".\")[0] in theme.colors) ? themeColor : color === void 0 ? theme.colorScheme === \"dark\" ? theme.colors.dark[4] : theme.colors.gray[4] : color;\n}\nvar useStyles = createStyles(function (theme, _ref, _ref2) {\n  var color = _ref.color;\n  var size = _ref2.size,\n    variant = _ref2.variant;\n  return {\n    root: {},\n    withLabel: {\n      borderTop: \"0 !important\"\n    },\n    left: {\n      \"&::before\": {\n        display: \"none\"\n      }\n    },\n    right: {\n      \"&::after\": {\n        display: \"none\"\n      }\n    },\n    label: {\n      display: \"flex\",\n      alignItems: \"center\",\n      \"&::before\": {\n        content: '\"\"',\n        flex: 1,\n        height: rem(1),\n        borderTop: \"\".concat(getSize({\n          size: size,\n          sizes: sizes\n        }), \" \").concat(variant, \" \").concat(getColor(theme, color)),\n        marginRight: theme.spacing.xs\n      },\n      \"&::after\": {\n        content: '\"\"',\n        flex: 1,\n        borderTop: \"\".concat(getSize({\n          size: size,\n          sizes: sizes\n        }), \" \").concat(variant, \" \").concat(getColor(theme, color)),\n        marginLeft: theme.spacing.xs\n      }\n    },\n    labelDefaultStyles: {\n      color: color === \"dark\" ? theme.colors.dark[1] : theme.fn.themeColor(color, theme.colorScheme === \"dark\" ? 5 : theme.fn.primaryShade(), false)\n    },\n    horizontal: {\n      border: 0,\n      borderTopWidth: rem(getSize({\n        size: size,\n        sizes: sizes\n      })),\n      borderTopColor: getColor(theme, color),\n      borderTopStyle: variant,\n      margin: 0\n    },\n    vertical: {\n      border: 0,\n      alignSelf: \"stretch\",\n      height: \"auto\",\n      borderLeftWidth: rem(getSize({\n        size: size,\n        sizes: sizes\n      })),\n      borderLeftColor: getColor(theme, color),\n      borderLeftStyle: variant\n    }\n  };\n});\nexport default useStyles;","map":null,"metadata":{},"sourceType":"module"}