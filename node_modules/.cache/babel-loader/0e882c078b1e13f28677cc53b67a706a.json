{"ast":null,"code":"'use client';\n\nimport _objectWithoutProperties from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"type\", \"withError\", \"withFocus\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useState, useRef, useCallback } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { useFormActions } from './actions/actions.mjs';\nimport { filterErrors } from './filter-errors/filter-errors.mjs';\nimport { getInputOnChange } from './get-input-on-change/get-input-on-change.mjs';\nimport { getStatus } from './get-status/get-status.mjs';\nimport { clearListState } from './lists/clear-list-state.mjs';\nimport { changeErrorIndices } from './lists/change-error-indices.mjs';\nimport { reorderErrors } from './lists/reorder-errors.mjs';\nimport { getPath } from './paths/get-path.mjs';\nimport { setPath } from './paths/set-path.mjs';\nimport { reorderPath } from './paths/reorder-path.mjs';\nimport { insertPath } from './paths/insert-path.mjs';\nimport { removePath } from './paths/remove-path.mjs';\nimport { validateValues } from './validate/validate-values.mjs';\nimport { validateFieldValue } from './validate/validate-field-value.mjs';\nimport { shouldValidateOnChange } from './validate/should-validate-on-change.mjs';\nfunction useForm() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    name = _ref.name,\n    initialValues = _ref.initialValues,\n    _ref$initialErrors = _ref.initialErrors,\n    initialErrors = _ref$initialErrors === void 0 ? {} : _ref$initialErrors,\n    _ref$initialDirty = _ref.initialDirty,\n    initialDirty = _ref$initialDirty === void 0 ? {} : _ref$initialDirty,\n    _ref$initialTouched = _ref.initialTouched,\n    initialTouched = _ref$initialTouched === void 0 ? {} : _ref$initialTouched,\n    _ref$clearInputErrorO = _ref.clearInputErrorOnChange,\n    clearInputErrorOnChange = _ref$clearInputErrorO === void 0 ? true : _ref$clearInputErrorO,\n    _ref$validateInputOnC = _ref.validateInputOnChange,\n    validateInputOnChange = _ref$validateInputOnC === void 0 ? false : _ref$validateInputOnC,\n    _ref$validateInputOnB = _ref.validateInputOnBlur,\n    validateInputOnBlur = _ref$validateInputOnB === void 0 ? false : _ref$validateInputOnB,\n    onValuesChange = _ref.onValuesChange,\n    _ref$transformValues = _ref.transformValues,\n    transformValues = _ref$transformValues === void 0 ? function (values) {\n      return values;\n    } : _ref$transformValues,\n    enhanceGetInputProps = _ref.enhanceGetInputProps,\n    rules = _ref.validate;\n  var _useState = useState(initialTouched),\n    _useState2 = _slicedToArray(_useState, 2),\n    touched = _useState2[0],\n    setTouched = _useState2[1];\n  var _useState3 = useState(initialDirty),\n    _useState4 = _slicedToArray(_useState3, 2),\n    dirty = _useState4[0],\n    setDirty = _useState4[1];\n  var _useState5 = useState(initialValues || {}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    values = _useState6[0],\n    _setValues = _useState6[1];\n  var _useState7 = useState(filterErrors(initialErrors)),\n    _useState8 = _slicedToArray(_useState7, 2),\n    errors = _useState8[0],\n    _setErrors = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    initialized = _useState10[0],\n    setInitialized = _useState10[1];\n  var valuesSnapshot = useRef(initialValues || {});\n  var setValuesSnapshot = function setValuesSnapshot(_values) {\n    valuesSnapshot.current = _values;\n  };\n  var initialize = useCallback(function (_values) {\n    if (!initialized) {\n      setInitialized(true);\n      _setValues(_values);\n    }\n  }, [initialized]);\n  var resetTouched = useCallback(function () {\n    return setTouched({});\n  }, []);\n  var resetDirty = function resetDirty(_values) {\n    var newSnapshot = _values ? _objectSpread(_objectSpread({}, values), _values) : values;\n    setValuesSnapshot(newSnapshot);\n    setDirty({});\n  };\n  var setErrors = useCallback(function (errs) {\n    return _setErrors(function (current) {\n      return filterErrors(typeof errs === \"function\" ? errs(current) : errs);\n    });\n  }, []);\n  var clearErrors = useCallback(function () {\n    return _setErrors({});\n  }, []);\n  var reset = useCallback(function () {\n    _setValues(valuesSnapshot.current);\n    clearErrors();\n    setDirty({});\n    resetTouched();\n  }, []);\n  var setFieldError = useCallback(function (path, error) {\n    return setErrors(function (current) {\n      return _objectSpread(_objectSpread({}, current), {}, _defineProperty({}, path, error));\n    });\n  }, []);\n  var clearFieldError = useCallback(function (path) {\n    return setErrors(function (current) {\n      if (typeof path !== \"string\") {\n        return current;\n      }\n      var clone = _objectSpread({}, current);\n      delete clone[path];\n      return clone;\n    });\n  }, []);\n  var clearFieldDirty = useCallback(function (path) {\n    return setDirty(function (current) {\n      if (typeof path !== \"string\") {\n        return current;\n      }\n      var result = clearListState(path, current);\n      delete result[path];\n      return result;\n    });\n  }, []);\n  var setFieldValue = useCallback(function (path, value) {\n    var shouldValidate = shouldValidateOnChange(path, validateInputOnChange);\n    clearFieldDirty(path);\n    setTouched(function (currentTouched) {\n      return _objectSpread(_objectSpread({}, currentTouched), {}, _defineProperty({}, path, true));\n    });\n    _setValues(function (current) {\n      var result = setPath(path, value, current);\n      if (shouldValidate) {\n        var validationResults = validateFieldValue(path, rules, result);\n        validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);\n      }\n      onValuesChange?.(result);\n      return result;\n    });\n    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);\n  }, []);\n  var setValues = useCallback(function (payload) {\n    _setValues(function (currentValues) {\n      var valuesPartial = typeof payload === \"function\" ? payload(currentValues) : payload;\n      var result = _objectSpread(_objectSpread({}, currentValues), valuesPartial);\n      onValuesChange?.(result);\n      return result;\n    });\n    clearInputErrorOnChange && clearErrors();\n  }, []);\n  var reorderListItem = useCallback(function (path, payload) {\n    clearFieldDirty(path);\n    _setValues(function (current) {\n      var result = reorderPath(path, payload, current);\n      onValuesChange?.(result);\n      return result;\n    });\n    _setErrors(function (errs) {\n      return reorderErrors(path, payload, errs);\n    });\n  }, []);\n  var removeListItem = useCallback(function (path, index) {\n    clearFieldDirty(path);\n    _setValues(function (current) {\n      var result = removePath(path, index, current);\n      onValuesChange?.(result);\n      return result;\n    });\n    _setErrors(function (errs) {\n      return changeErrorIndices(path, index, errs, -1);\n    });\n  }, []);\n  var insertListItem = useCallback(function (path, item, index) {\n    clearFieldDirty(path);\n    _setValues(function (current) {\n      var result = insertPath(path, item, index, current);\n      onValuesChange?.(result);\n      return result;\n    });\n    _setErrors(function (errs) {\n      return changeErrorIndices(path, index, errs, 1);\n    });\n  }, []);\n  var validate = useCallback(function () {\n    var results = validateValues(rules, values);\n    _setErrors(results.errors);\n    return results;\n  }, [values, rules]);\n  var validateField = useCallback(function (path) {\n    var results = validateFieldValue(path, rules, values);\n    results.hasError ? setFieldError(path, results.error) : clearFieldError(path);\n    return results;\n  }, [values, rules]);\n  var getInputProps = function getInputProps(path) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$type = _ref2.type,\n      type = _ref2$type === void 0 ? \"input\" : _ref2$type,\n      _ref2$withError = _ref2.withError,\n      withError = _ref2$withError === void 0 ? true : _ref2$withError,\n      _ref2$withFocus = _ref2.withFocus,\n      withFocus = _ref2$withFocus === void 0 ? true : _ref2$withFocus,\n      otherOptions = _objectWithoutProperties(_ref2, _excluded);\n    var onChange = getInputOnChange(function (value) {\n      return setFieldValue(path, value);\n    });\n    var payload = {\n      onChange: onChange\n    };\n    if (withError) {\n      payload.error = errors[path];\n    }\n    if (type === \"checkbox\") {\n      payload.checked = getPath(path, values);\n    } else {\n      payload.value = getPath(path, values);\n    }\n    if (withFocus) {\n      payload.onFocus = function () {\n        return setTouched(function (current) {\n          return _objectSpread(_objectSpread({}, current), {}, _defineProperty({}, path, true));\n        });\n      };\n      payload.onBlur = function () {\n        if (shouldValidateOnChange(path, validateInputOnBlur)) {\n          var validationResults = validateFieldValue(path, rules, values);\n          validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);\n        }\n      };\n    }\n    return Object.assign(payload, enhanceGetInputProps?.({\n      inputProps: payload,\n      field: path,\n      options: _objectSpread({\n        type: type,\n        withError: withError,\n        withFocus: withFocus\n      }, otherOptions),\n      form: form\n    }));\n  };\n  var onSubmit = function onSubmit(handleSubmit, handleValidationFailure) {\n    return function (event) {\n      event?.preventDefault();\n      var results = validate();\n      if (results.hasErrors) {\n        handleValidationFailure?.(results.errors, values, event);\n      } else {\n        handleSubmit?.(transformValues(values), event);\n      }\n    };\n  };\n  var getTransformedValues = function getTransformedValues(input) {\n    return transformValues(input || values);\n  };\n  var onReset = useCallback(function (event) {\n    event.preventDefault();\n    reset();\n  }, []);\n  var isDirty = function isDirty(path) {\n    if (path) {\n      var overriddenValue = getPath(path, dirty);\n      if (typeof overriddenValue === \"boolean\") {\n        return overriddenValue;\n      }\n      var sliceOfValues = getPath(path, values);\n      var sliceOfInitialValues = getPath(path, valuesSnapshot.current);\n      return !isEqual(sliceOfValues, sliceOfInitialValues);\n    }\n    var isOverridden = Object.keys(dirty).length > 0;\n    if (isOverridden) {\n      return getStatus(dirty);\n    }\n    return !isEqual(values, valuesSnapshot.current);\n  };\n  var isTouched = useCallback(function (path) {\n    return getStatus(touched, path);\n  }, [touched]);\n  var isValid = useCallback(function (path) {\n    return path ? !validateFieldValue(path, rules, values).hasError : !validateValues(rules, values).hasErrors;\n  }, [values, rules]);\n  var form = {\n    initialized: initialized,\n    values: values,\n    errors: errors,\n    initialize: initialize,\n    setValues: setValues,\n    setInitialValues: setValuesSnapshot,\n    setErrors: setErrors,\n    setFieldValue: setFieldValue,\n    setFieldError: setFieldError,\n    clearFieldError: clearFieldError,\n    clearErrors: clearErrors,\n    reset: reset,\n    validate: validate,\n    validateField: validateField,\n    reorderListItem: reorderListItem,\n    removeListItem: removeListItem,\n    insertListItem: insertListItem,\n    getInputProps: getInputProps,\n    onSubmit: onSubmit,\n    onReset: onReset,\n    isDirty: isDirty,\n    isTouched: isTouched,\n    setTouched: setTouched,\n    setDirty: setDirty,\n    resetTouched: resetTouched,\n    resetDirty: resetDirty,\n    isValid: isValid,\n    getTransformedValues: getTransformedValues\n  };\n  useFormActions(name, form);\n  return form;\n}\nexport { useForm };","map":null,"metadata":{},"sourceType":"module"}