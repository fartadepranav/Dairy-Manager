{"ast":null,"code":"import _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useRef, useState, useEffect } from 'react';\nfunction containsRelatedTarget(event) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n  return false;\n}\nfunction useFocusWithin() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    onBlur = _ref.onBlur,\n    onFocus = _ref.onFocus;\n  var ref = useRef();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    focused = _useState2[0],\n    _setFocused = _useState2[1];\n  var focusedRef = useRef(false);\n  var setFocused = function setFocused(value) {\n    _setFocused(value);\n    focusedRef.current = value;\n  };\n  var handleFocusIn = function handleFocusIn(event) {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus == null ? void 0 : onFocus(event);\n    }\n  };\n  var handleFocusOut = function handleFocusOut(event) {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur == null ? void 0 : onBlur(event);\n    }\n  };\n  useEffect(function () {\n    if (ref.current) {\n      ref.current.addEventListener(\"focusin\", handleFocusIn);\n      ref.current.addEventListener(\"focusout\", handleFocusOut);\n      return function () {\n        var _a, _b;\n        (_a = ref.current) == null ? void 0 : _a.removeEventListener(\"focusin\", handleFocusIn);\n        (_b = ref.current) == null ? void 0 : _b.removeEventListener(\"focusout\", handleFocusOut);\n      };\n    }\n    return void 0;\n  }, [handleFocusIn, handleFocusOut]);\n  return {\n    ref: ref,\n    focused: focused\n  };\n}\nexport { useFocusWithin };","map":null,"metadata":{},"sourceType":"module"}