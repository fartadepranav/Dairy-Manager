{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport React, { forwardRef } from 'react';\nimport { useComponentDefaultProps } from '@mantine/styles';\nimport useStyles from './Progress.styles.js';\nimport { Tooltip } from '../Tooltip/Tooltip.js';\nimport { Box } from '../Box/Box.js';\nimport { Text } from '../Text/Text.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return target;\n};\nfunction getCumulativeSections(sections) {\n  return sections.reduce(function (acc, section) {\n    acc.sections.push(__spreadProps(__spreadValues({}, section), {\n      accumulated: acc.accumulated\n    }));\n    acc.accumulated += section.value;\n    return acc;\n  }, {\n    accumulated: 0,\n    sections: []\n  }).sections;\n}\nvar defaultProps = {\n  size: \"md\",\n  radius: \"sm\",\n  striped: false,\n  animate: false,\n  label: \"\"\n};\nvar Progress = forwardRef(function (props, ref) {\n  var _a = useComponentDefaultProps(\"Progress\", defaultProps, props),\n    className = _a.className,\n    value = _a.value,\n    color = _a.color,\n    size = _a.size,\n    radius = _a.radius,\n    striped = _a.striped,\n    animate = _a.animate,\n    label = _a.label,\n    ariaLabel = _a[\"aria-label\"],\n    classNames = _a.classNames,\n    styles = _a.styles,\n    sections = _a.sections,\n    unstyled = _a.unstyled,\n    variant = _a.variant,\n    others = __objRest(_a, [\"className\", \"value\", \"color\", \"size\", \"radius\", \"striped\", \"animate\", \"label\", \"aria-label\", \"classNames\", \"styles\", \"sections\", \"unstyled\", \"variant\"]);\n  var _useStyles = useStyles({\n      color: color,\n      radius: radius\n    }, {\n      name: \"Progress\",\n      classNames: classNames,\n      styles: styles,\n      unstyled: unstyled,\n      variant: variant,\n      size: size\n    }),\n    classes = _useStyles.classes,\n    cx = _useStyles.cx,\n    theme = _useStyles.theme;\n  var segments = Array.isArray(sections) ? getCumulativeSections(sections).map(function (_b, index) {\n    var _c = _b,\n      tooltip = _c.tooltip,\n      accumulated = _c.accumulated,\n      sectionValue = _c.value,\n      sectionLabel = _c.label,\n      sectionColor = _c.color,\n      sectionProps = __objRest(_c, [\"tooltip\", \"accumulated\", \"value\", \"label\", \"color\"]);\n    return /* @__PURE__ */React.createElement(Tooltip.Floating, {\n      label: tooltip,\n      disabled: !tooltip,\n      key: index\n    }, /* @__PURE__ */React.createElement(Box, __spreadProps(__spreadValues({}, sectionProps), {\n      className: cx(classes.bar, sectionProps.className),\n      \"data-striped\": striped || animate || void 0,\n      \"data-animate\": animate || void 0,\n      sx: {\n        width: \"\".concat(sectionValue, \"%\"),\n        left: \"\".concat(accumulated, \"%\"),\n        backgroundColor: theme.fn.variant({\n          variant: \"filled\",\n          primaryFallback: false,\n          color: sectionColor || theme.primaryColor\n        }).background\n      }\n    }), sectionLabel && /* @__PURE__ */React.createElement(Text, {\n      className: classes.label\n    }, sectionLabel)));\n  }) : null;\n  return /* @__PURE__ */React.createElement(Box, __spreadValues({\n    className: cx(classes.root, className),\n    ref: ref\n  }, others), segments || /* @__PURE__ */React.createElement(\"div\", {\n    role: \"progressbar\",\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": value,\n    \"aria-label\": ariaLabel,\n    className: classes.bar,\n    style: {\n      width: \"\".concat(value, \"%\")\n    },\n    \"data-striped\": striped || animate || void 0,\n    \"data-animate\": animate || void 0\n  }, label ? /* @__PURE__ */React.createElement(Text, {\n    className: classes.label\n  }, label) : \"\"));\n});\nProgress.displayName = \"@mantine/core/Progress\";\nexport { Progress };","map":null,"metadata":{},"sourceType":"module"}