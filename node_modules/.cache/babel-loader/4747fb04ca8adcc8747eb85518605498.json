{"ast":null,"code":"import _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { Children as $iqq3r$Children, cloneElement as $iqq3r$cloneElement, useState as $iqq3r$useState, useRef as $iqq3r$useRef, useEffect as $iqq3r$useEffect, useCallback as $iqq3r$useCallback, useReducer as $iqq3r$useReducer } from \"react\";\nimport { flushSync as $iqq3r$flushSync } from \"react-dom\";\nimport { useComposedRefs as $iqq3r$useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { useLayoutEffect as $iqq3r$useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nfunction $fe963b355347cc68$export$3e6543de14f8614f(initialState, machine) {\n  return $iqq3r$useReducer(function (state, event) {\n    var nextState = machine[state][event];\n    return nextState !== null && nextState !== void 0 ? nextState : state;\n  }, initialState);\n}\nvar $921a889cee6df7e8$export$99c2b779aa4e8b8b = function $921a889cee6df7e8$export$99c2b779aa4e8b8b(props) {\n  var present = props.present,\n    children = props.children;\n  var presence = $921a889cee6df7e8$var$usePresence(present);\n  var child = typeof children === 'function' ? children({\n    present: presence.isPresent\n  }) : $iqq3r$Children.only(children);\n  var ref = $iqq3r$useComposedRefs(presence.ref, child.ref);\n  var forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? /*#__PURE__*/$iqq3r$cloneElement(child, {\n    ref: ref\n  }) : null;\n};\n$921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = 'Presence';\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\nfunction $921a889cee6df7e8$var$usePresence(present) {\n  var _$iqq3r$useState = $iqq3r$useState(),\n    _$iqq3r$useState2 = _slicedToArray(_$iqq3r$useState, 2),\n    node1 = _$iqq3r$useState2[0],\n    setNode = _$iqq3r$useState2[1];\n  var stylesRef = $iqq3r$useRef({});\n  var prevPresentRef = $iqq3r$useRef(present);\n  var prevAnimationNameRef = $iqq3r$useRef('none');\n  var initialState = present ? 'mounted' : 'unmounted';\n  var _$fe963b355347cc68$ex = $fe963b355347cc68$export$3e6543de14f8614f(initialState, {\n      mounted: {\n        UNMOUNT: 'unmounted',\n        ANIMATION_OUT: 'unmountSuspended'\n      },\n      unmountSuspended: {\n        MOUNT: 'mounted',\n        ANIMATION_END: 'unmounted'\n      },\n      unmounted: {\n        MOUNT: 'mounted'\n      }\n    }),\n    _$fe963b355347cc68$ex2 = _slicedToArray(_$fe963b355347cc68$ex, 2),\n    state = _$fe963b355347cc68$ex2[0],\n    send = _$fe963b355347cc68$ex2[1];\n  $iqq3r$useEffect(function () {\n    var currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);\n    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';\n  }, [state]);\n  $iqq3r$useLayoutEffect(function () {\n    var styles = stylesRef.current;\n    var wasPresent = prevPresentRef.current;\n    var hasPresentChanged = wasPresent !== present;\n    if (hasPresentChanged) {\n      var prevAnimationName = prevAnimationNameRef.current;\n      var currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles);\n      if (present) send('MOUNT');else if (currentAnimationName === 'none' || (styles === null || styles === void 0 ? void 0 : styles.display) === 'none')\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');else {\n        /**\n        * When `present` changes to `false`, we check changes to animation-name to\n        * determine whether an animation has started. We chose this approach (reading\n        * computed styles) because there is no `animationrun` event and `animationstart`\n        * fires after `animation-delay` has expired which would be too late.\n        */\n        var isAnimating = prevAnimationName !== currentAnimationName;\n        if (wasPresent && isAnimating) send('ANIMATION_OUT');else send('UNMOUNT');\n      }\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n  $iqq3r$useLayoutEffect(function () {\n    if (node1) {\n      /**\n      * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n      * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n      * make sure we only trigger ANIMATION_END for the currently active animation.\n      */\n      var handleAnimationEnd = function handleAnimationEnd(event) {\n        var currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);\n        var isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node1 && isCurrentAnimation)\n          // With React 18 concurrency this update is applied\n          // a frame after the animation ends, creating a flash of visible content.\n          // By manually flushing we ensure they sync within a frame, removing the flash.\n          $iqq3r$flushSync(function () {\n            return send('ANIMATION_END');\n          });\n      };\n      var handleAnimationStart = function handleAnimationStart(event) {\n        if (event.target === node1)\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);\n      };\n      node1.addEventListener('animationstart', handleAnimationStart);\n      node1.addEventListener('animationcancel', handleAnimationEnd);\n      node1.addEventListener('animationend', handleAnimationEnd);\n      return function () {\n        node1.removeEventListener('animationstart', handleAnimationStart);\n        node1.removeEventListener('animationcancel', handleAnimationEnd);\n        node1.removeEventListener('animationend', handleAnimationEnd);\n      };\n    } else\n      // Transition to the unmounted state if the node is removed prematurely.\n      // We avoid doing so during cleanup as the node may change but still exist.\n      send('ANIMATION_END');\n  }, [node1, send]);\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: $iqq3r$useCallback(function (node) {\n      if (node) stylesRef.current = getComputedStyle(node);\n      setNode(node);\n    }, [])\n  };\n}\n/* -----------------------------------------------------------------------------------------------*/\nfunction $921a889cee6df7e8$var$getAnimationName(styles) {\n  return (styles === null || styles === void 0 ? void 0 : styles.animationName) || 'none';\n}\nexport { $921a889cee6df7e8$export$99c2b779aa4e8b8b as Presence };","map":null,"metadata":{},"sourceType":"module"}