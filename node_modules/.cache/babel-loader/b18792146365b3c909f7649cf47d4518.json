{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { env } from './env';\nvar cache = new WeakMap();\nvar NO_OPTIONS = {};\nexport function useSidecar(importer, effect) {\n  var options = effect && effect.options || NO_OPTIONS;\n  if (env.isNode && !options.ssr) {\n    return [null, null];\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useRealSidecar(importer, effect);\n}\nfunction useRealSidecar(importer, effect) {\n  var options = effect && effect.options || NO_OPTIONS;\n  var couldUseCache = env.forceCache || env.isNode && !!options.ssr || !options.async;\n  var _a = useState(couldUseCache ? function () {\n      return cache.get(importer);\n    } : undefined),\n    Car = _a[0],\n    setCar = _a[1];\n  var _b = useState(null),\n    error = _b[0],\n    setError = _b[1];\n  useEffect(function () {\n    if (!Car) {\n      importer().then(function (car) {\n        var resolved = effect ? effect.read() : car.default || car;\n        if (!resolved) {\n          console.error('Sidecar error: with importer', importer);\n          var error_1;\n          if (effect) {\n            console.error('Sidecar error: with medium', effect);\n            error_1 = new Error('Sidecar medium was not found');\n          } else {\n            error_1 = new Error('Sidecar was not found in exports');\n          }\n          setError(function () {\n            return error_1;\n          });\n          throw error_1;\n        }\n        cache.set(importer, resolved);\n        setCar(function () {\n          return resolved;\n        });\n      }, function (e) {\n        return setError(function () {\n          return e;\n        });\n      });\n    }\n  }, []);\n  return [Car, error];\n}","map":null,"metadata":{},"sourceType":"module"}