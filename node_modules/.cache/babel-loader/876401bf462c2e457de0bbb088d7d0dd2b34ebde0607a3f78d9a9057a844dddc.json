{"ast":null,"code":"import { round } from './parsers.js';\nfunction hsvaToRgbaObject(_ref) {\n  var h = _ref.h,\n    s = _ref.s,\n    v = _ref.v,\n    a = _ref.a;\n  var _h = h / 360 * 6;\n  var _s = s / 100;\n  var _v = v / 100;\n  var hh = Math.floor(_h);\n  var l = _v * (1 - _s);\n  var c = _v * (1 - (_h - hh) * _s);\n  var d = _v * (1 - (1 - _h + hh) * _s);\n  var module = hh % 6;\n  return {\n    r: round([_v, c, l, l, d, _v][module] * 255),\n    g: round([d, _v, _v, c, l, l][module] * 255),\n    b: round([l, l, d, _v, _v, c][module] * 255),\n    a: round(a, 2)\n  };\n}\nfunction hsvaToRgba(color, includeAlpha) {\n  var _hsvaToRgbaObject = hsvaToRgbaObject(color),\n    r = _hsvaToRgbaObject.r,\n    g = _hsvaToRgbaObject.g,\n    b = _hsvaToRgbaObject.b,\n    a = _hsvaToRgbaObject.a;\n  if (!includeAlpha) {\n    return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n  }\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(round(a, 2), \")\");\n}\nfunction hsvaToHsl(_ref2, includeAlpha) {\n  var h = _ref2.h,\n    s = _ref2.s,\n    v = _ref2.v,\n    a = _ref2.a;\n  var hh = (200 - s) * v / 100;\n  var result = {\n    h: Math.round(h),\n    s: Math.round(hh > 0 && hh < 200 ? s * v / 100 / (hh <= 100 ? hh : 200 - hh) * 100 : 0),\n    l: Math.round(hh / 2)\n  };\n  if (!includeAlpha) {\n    return \"hsl(\".concat(result.h, \", \").concat(result.s, \"%, \").concat(result.l, \"%)\");\n  }\n  return \"hsla(\".concat(result.h, \", \").concat(result.s, \"%, \").concat(result.l, \"%, \").concat(round(a, 2), \")\");\n}\nfunction formatHexPart(number) {\n  var hex = number.toString(16);\n  return hex.length < 2 ? \"0\".concat(hex) : hex;\n}\nfunction hsvaToHex(color) {\n  var _hsvaToRgbaObject2 = hsvaToRgbaObject(color),\n    r = _hsvaToRgbaObject2.r,\n    g = _hsvaToRgbaObject2.g,\n    b = _hsvaToRgbaObject2.b;\n  return \"#\".concat(formatHexPart(r)).concat(formatHexPart(g)).concat(formatHexPart(b));\n}\nfunction hsvaToHexa(color) {\n  var a = Math.round(color.a * 255);\n  return \"\".concat(hsvaToHex(color)).concat(formatHexPart(a));\n}\nvar CONVERTERS = {\n  hex: hsvaToHex,\n  hexa: function hexa(color) {\n    return hsvaToHexa(color);\n  },\n  rgb: function rgb(color) {\n    return hsvaToRgba(color, false);\n  },\n  rgba: function rgba(color) {\n    return hsvaToRgba(color, true);\n  },\n  hsl: function hsl(color) {\n    return hsvaToHsl(color, false);\n  },\n  hsla: function hsla(color) {\n    return hsvaToHsl(color, true);\n  }\n};\nfunction convertHsvaTo(format, color) {\n  if (!color) {\n    return \"#000000\";\n  }\n  if (!(format in CONVERTERS)) {\n    return CONVERTERS.hex(color);\n  }\n  return CONVERTERS[format](color);\n}\nexport { convertHsvaTo, hsvaToHex, hsvaToHexa, hsvaToHsl, hsvaToRgba, hsvaToRgbaObject };","map":{"version":3,"names":["hsvaToRgbaObject","_ref","h","s","v","a","_h","_s","_v","hh","Math","floor","l","c","d","module","r","round","g","b","hsvaToRgba","color","includeAlpha","_hsvaToRgbaObject","concat","hsvaToHsl","_ref2","result","formatHexPart","number","hex","toString","length","hsvaToHex","_hsvaToRgbaObject2","hsvaToHexa","CONVERTERS","hexa","rgb","rgba","hsl","hsla","convertHsvaTo","format"],"sources":["F:\\Dairy Project\\dairy_management\\node_modules\\@mantine\\core\\src\\ColorPicker\\converters\\converters.ts"],"sourcesContent":["import { HsvaColor, RgbaColor, ColorFormat } from '../types';\nimport { round } from './parsers';\n\nexport function hsvaToRgbaObject({ h, s, v, a }: HsvaColor): RgbaColor {\n  const _h = (h / 360) * 6;\n  const _s = s / 100;\n  const _v = v / 100;\n\n  const hh = Math.floor(_h);\n  const l = _v * (1 - _s);\n  const c = _v * (1 - (_h - hh) * _s);\n  const d = _v * (1 - (1 - _h + hh) * _s);\n  const module = hh % 6;\n\n  return {\n    r: round([_v, c, l, l, d, _v][module] * 255),\n    g: round([d, _v, _v, c, l, l][module] * 255),\n    b: round([l, l, d, _v, _v, c][module] * 255),\n    a: round(a, 2),\n  };\n}\n\nexport function hsvaToRgba(color: HsvaColor, includeAlpha: boolean) {\n  const { r, g, b, a } = hsvaToRgbaObject(color);\n\n  if (!includeAlpha) {\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${round(a, 2)})`;\n}\n\nexport function hsvaToHsl({ h, s, v, a }: HsvaColor, includeAlpha: boolean) {\n  const hh = ((200 - s) * v) / 100;\n\n  const result = {\n    h: Math.round(h),\n    s: Math.round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n    l: Math.round(hh / 2),\n  };\n\n  if (!includeAlpha) {\n    return `hsl(${result.h}, ${result.s}%, ${result.l}%)`;\n  }\n\n  return `hsla(${result.h}, ${result.s}%, ${result.l}%, ${round(a, 2)})`;\n}\n\nfunction formatHexPart(number: number) {\n  const hex = number.toString(16);\n  return hex.length < 2 ? `0${hex}` : hex;\n}\n\nexport function hsvaToHex(color: HsvaColor) {\n  const { r, g, b } = hsvaToRgbaObject(color);\n  return `#${formatHexPart(r)}${formatHexPart(g)}${formatHexPart(b)}`;\n}\n\nexport function hsvaToHexa(color: HsvaColor) {\n  const a = Math.round(color.a * 255);\n\n  return `${hsvaToHex(color)}${formatHexPart(a)}`;\n}\n\nconst CONVERTERS: Record<ColorFormat, (color: HsvaColor) => string> = {\n  hex: hsvaToHex,\n  hexa: (color) => hsvaToHexa(color),\n  rgb: (color) => hsvaToRgba(color, false),\n  rgba: (color) => hsvaToRgba(color, true),\n  hsl: (color) => hsvaToHsl(color, false),\n  hsla: (color) => hsvaToHsl(color, true),\n};\n\nexport function convertHsvaTo(format: ColorFormat, color: HsvaColor) {\n  if (!color) {\n    return '#000000';\n  }\n\n  if (!(format in CONVERTERS)) {\n    return CONVERTERS.hex(color);\n  }\n\n  return CONVERTERS[format](color);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}