{"ast":null,"code":"import _toConsumableArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport React, { forwardRef, useState, useRef, useEffect } from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { useComponentDefaultProps } from '@mantine/styles';\nimport { createPinArray } from './create-pin-array/create-pin-array.js';\nimport useStyles from './PinInput.styles.js';\nimport { Group } from '../Group/Group.js';\nimport { Input } from '../Input/Input.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return target;\n};\nvar regex = {\n  number: /^[0-9]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/i\n};\nvar defaultProps = {\n  spacing: \"sm\",\n  size: \"sm\",\n  length: 4,\n  manageFocus: true,\n  placeholder: \"\\u25CB\",\n  type: \"alphanumeric\"\n};\nvar PinInput = forwardRef(function (props, ref) {\n  var _a = useComponentDefaultProps(\"PinInput\", defaultProps, props),\n    name = _a.name,\n    form = _a.form,\n    className = _a.className,\n    value = _a.value,\n    defaultValue = _a.defaultValue,\n    variant = _a.variant,\n    spacing = _a.spacing,\n    size = _a.size,\n    classNames = _a.classNames,\n    styles = _a.styles,\n    unstyled = _a.unstyled,\n    sx = _a.sx,\n    length = _a.length,\n    onChange = _a.onChange,\n    onComplete = _a.onComplete,\n    manageFocus = _a.manageFocus,\n    autoFocus = _a.autoFocus,\n    error = _a.error,\n    radius = _a.radius,\n    disabled = _a.disabled,\n    oneTimeCode = _a.oneTimeCode,\n    placeholder = _a.placeholder,\n    type = _a.type,\n    mask = _a.mask,\n    ariaLabel = _a[\"aria-label\"],\n    readOnly = _a.readOnly,\n    inputType = _a.inputType,\n    inputMode = _a.inputMode,\n    others = __objRest(_a, [\"name\", \"form\", \"className\", \"value\", \"defaultValue\", \"variant\", \"spacing\", \"size\", \"classNames\", \"styles\", \"unstyled\", \"sx\", \"length\", \"onChange\", \"onComplete\", \"manageFocus\", \"autoFocus\", \"error\", \"radius\", \"disabled\", \"oneTimeCode\", \"placeholder\", \"type\", \"mask\", \"aria-label\", \"readOnly\", \"inputType\", \"inputMode\"]);\n  var uuid = useId(name);\n  var _useStyles = useStyles(null, {\n      name: \"PinInput\",\n      classNames: classNames,\n      styles: styles,\n      unstyled: unstyled,\n      variant: variant,\n      size: size\n    }),\n    classes = _useStyles.classes,\n    cx = _useStyles.cx;\n  var _useState = useState(-1),\n    _useState2 = _slicedToArray(_useState, 2),\n    focusedIndex = _useState2[0],\n    setFocusedIndex = _useState2[1];\n  var _useUncontrolled = useUncontrolled({\n      value: value,\n      defaultValue: defaultValue,\n      finalValue: \"\",\n      onChange: onChange\n    }),\n    _useUncontrolled2 = _slicedToArray(_useUncontrolled, 2),\n    _value = _useUncontrolled2[0],\n    setValues = _useUncontrolled2[1];\n  var inputsRef = useRef([]);\n  var validate = function validate(code) {\n    var re = type instanceof RegExp ? type : type in regex ? regex[type] : null;\n    return re == null ? void 0 : re.test(code);\n  };\n  var focusInputField = function focusInputField(dir, index) {\n    if (!manageFocus) return;\n    if (dir === \"next\") {\n      var nextIndex = index + 1;\n      inputsRef.current[nextIndex < length ? nextIndex : index].focus();\n    }\n    if (dir === \"prev\") {\n      var _nextIndex = index - 1;\n      inputsRef.current[_nextIndex > -1 ? _nextIndex : index].focus();\n    }\n  };\n  var setFieldValue = function setFieldValue(val, index) {\n    var values = _toConsumableArray(createPinArray(length, _value));\n    values[index] = val;\n    setValues(values.join(\"\"));\n  };\n  var handleChange = function handleChange(event, index) {\n    var inputValue = event.target.value;\n    var nextCharOrValue = inputValue.length === 2 ? inputValue.split(\"\")[inputValue.length - 1] : inputValue;\n    var isValid = validate(nextCharOrValue);\n    if (nextCharOrValue.length < 2) {\n      if (isValid) {\n        setFieldValue(nextCharOrValue, index);\n        focusInputField(\"next\", index);\n      } else {\n        setFieldValue(\"\", index);\n      }\n    } else if (isValid) {\n      setValues(inputValue);\n    }\n  };\n  var handleKeyDown = function handleKeyDown(event, index) {\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault();\n      focusInputField(\"prev\", index);\n    } else if (event.key === \"ArrowRight\") {\n      event.preventDefault();\n      focusInputField(\"next\", index);\n    } else if (event.key === \"Delete\") {\n      event.preventDefault();\n      setFieldValue(\"\", index);\n    } else if (event.key === \"Backspace\") {\n      event.preventDefault();\n      setFieldValue(\"\", index);\n      if (length === index + 1) {\n        if (event.target.value === \"\") {\n          focusInputField(\"prev\", index);\n        }\n      } else {\n        focusInputField(\"prev\", index);\n      }\n    }\n  };\n  var handleFocus = function handleFocus(event, index) {\n    event.target.select();\n    setFocusedIndex(index);\n  };\n  var handleBlur = function handleBlur() {\n    setFocusedIndex(-1);\n  };\n  var handlePaste = function handlePaste(event) {\n    event.preventDefault();\n    var copyValue = event.clipboardData.getData(\"Text\");\n    var isValid = validate(copyValue);\n    if (isValid) {\n      setValues(copyValue);\n    }\n  };\n  useEffect(function () {\n    if (_value.length !== length) return;\n    onComplete == null ? void 0 : onComplete(_value);\n  }, [_value]);\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(Group, __spreadValues({\n    role: \"group\",\n    spacing: spacing,\n    ref: ref,\n    className: cx(classes.root, className),\n    sx: sx,\n    unstyled: unstyled,\n    id: uuid,\n    noWrap: true\n  }, others), createPinArray(length, _value).map(function (char, index) {\n    return /* @__PURE__ */React.createElement(Input, {\n      __staticSelector: \"PinInput\",\n      id: \"\".concat(uuid, \"-\").concat(index + 1),\n      key: \"\".concat(uuid, \"-\").concat(index),\n      inputMode: inputMode || (type === \"number\" ? \"numeric\" : \"text\"),\n      onChange: function onChange(event) {\n        return handleChange(event, index);\n      },\n      onKeyDown: function onKeyDown(event) {\n        return handleKeyDown(event, index);\n      },\n      onFocus: function onFocus(event) {\n        return handleFocus(event, index);\n      },\n      onBlur: handleBlur,\n      onPaste: handlePaste,\n      type: inputType || (mask ? \"password\" : type === \"number\" ? \"tel\" : \"text\"),\n      radius: radius,\n      error: error,\n      variant: variant,\n      size: size,\n      disabled: disabled,\n      ref: function ref(node) {\n        inputsRef.current[index] = node;\n      },\n      autoComplete: oneTimeCode ? \"one-time-code\" : \"off\",\n      placeholder: focusedIndex === index ? \"\" : placeholder,\n      value: char,\n      autoFocus: autoFocus && index === 0,\n      classNames: __spreadProps(__spreadValues({}, classNames), {\n        input: cx(classes.input, classNames == null ? void 0 : classNames.input)\n      }),\n      styles: styles,\n      unstyled: unstyled,\n      \"aria-label\": ariaLabel,\n      readOnly: readOnly\n    });\n  })), /* @__PURE__ */React.createElement(\"input\", {\n    type: \"hidden\",\n    name: name,\n    form: form,\n    value: _value\n  }));\n});\nPinInput.displayName = \"@mantine/core/PinInput\";\nexport { PinInput };","map":null,"metadata":{},"sourceType":"module"}