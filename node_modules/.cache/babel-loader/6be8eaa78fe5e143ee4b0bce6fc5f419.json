{"ast":null,"code":"import _toConsumableArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nimport { useDelayGroupContext, useFloating, offset, shift, flip, arrow, inline, useInteractions, useHover, useFocus, useRole, useDismiss, useDelayGroup } from '@floating-ui/react';\nimport { useId, useDidUpdate } from '@mantine/hooks';\nimport { useTooltipGroupContext } from './TooltipGroup/TooltipGroup.context.js';\nimport { useFloatingAutoUpdate } from '../Floating/use-floating-auto-update.js';\nfunction useTooltip(settings) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    uncontrolledOpened = _useState2[0],\n    setUncontrolledOpened = _useState2[1];\n  var controlled = typeof settings.opened === \"boolean\";\n  var opened = controlled ? settings.opened : uncontrolledOpened;\n  var withinGroup = useTooltipGroupContext();\n  var uid = useId();\n  var _useDelayGroupContext = useDelayGroupContext(),\n    groupDelay = _useDelayGroupContext.delay,\n    currentId = _useDelayGroupContext.currentId,\n    setCurrentId = _useDelayGroupContext.setCurrentId;\n  var onChange = useCallback(function (_opened) {\n    setUncontrolledOpened(_opened);\n    if (_opened) {\n      setCurrentId(uid);\n    }\n  }, [setCurrentId, uid]);\n  var _useFloating = useFloating({\n      placement: settings.position,\n      open: opened,\n      onOpenChange: onChange,\n      middleware: [offset(settings.offset), shift({\n        padding: 8\n      }), flip(), arrow({\n        element: settings.arrowRef,\n        padding: settings.arrowOffset\n      })].concat(_toConsumableArray(settings.inline ? [inline()] : []))\n    }),\n    x = _useFloating.x,\n    y = _useFloating.y,\n    reference = _useFloating.reference,\n    floating = _useFloating.floating,\n    context = _useFloating.context,\n    refs = _useFloating.refs,\n    update = _useFloating.update,\n    placement = _useFloating.placement,\n    _useFloating$middlewa = _useFloating.middlewareData.arrow,\n    _useFloating$middlewa2 = _useFloating$middlewa === void 0 ? {} : _useFloating$middlewa,\n    arrowX = _useFloating$middlewa2.x,\n    arrowY = _useFloating$middlewa2.y;\n  var _useInteractions = useInteractions([useHover(context, {\n      enabled: settings.events.hover,\n      delay: withinGroup ? groupDelay : {\n        open: settings.openDelay,\n        close: settings.closeDelay\n      },\n      mouseOnly: !settings.events.touch\n    }), useFocus(context, {\n      enabled: settings.events.focus,\n      keyboardOnly: true\n    }), useRole(context, {\n      role: \"tooltip\"\n    }), useDismiss(context, {\n      enabled: typeof settings.opened === void 0\n    }), useDelayGroup(context, {\n      id: uid\n    })]),\n    getReferenceProps = _useInteractions.getReferenceProps,\n    getFloatingProps = _useInteractions.getFloatingProps;\n  useFloatingAutoUpdate({\n    opened: opened,\n    position: settings.position,\n    positionDependencies: settings.positionDependencies,\n    floating: {\n      refs: refs,\n      update: update\n    }\n  });\n  useDidUpdate(function () {\n    var _a;\n    (_a = settings.onPositionChange) == null ? void 0 : _a.call(settings, placement);\n  }, [placement]);\n  var isGroupPhase = opened && currentId && currentId !== uid;\n  return {\n    x: x,\n    y: y,\n    arrowX: arrowX,\n    arrowY: arrowY,\n    reference: reference,\n    floating: floating,\n    getFloatingProps: getFloatingProps,\n    getReferenceProps: getReferenceProps,\n    isGroupPhase: isGroupPhase,\n    opened: opened,\n    placement: placement\n  };\n}\nexport { useTooltip };","map":null,"metadata":{},"sourceType":"module"}