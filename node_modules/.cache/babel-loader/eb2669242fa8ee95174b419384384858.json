{"ast":null,"code":"function mergeClassNames(_ref) {\n  var cx = _ref.cx,\n    classes = _ref.classes,\n    context = _ref.context,\n    classNames = _ref.classNames,\n    name = _ref.name,\n    cache = _ref.cache;\n  var contextClassNames = context.reduce(function (acc, item) {\n    Object.keys(item.classNames).forEach(function (key) {\n      if (typeof acc[key] !== \"string\") {\n        acc[key] = \"\".concat(item.classNames[key]);\n      } else {\n        acc[key] = \"\".concat(acc[key], \" \").concat(item.classNames[key]);\n      }\n    });\n    return acc;\n  }, {});\n  return Object.keys(classes).reduce(function (acc, className) {\n    acc[className] = cx(classes[className], contextClassNames[className], classNames != null && classNames[className], Array.isArray(name) ? name.filter(Boolean).map(function (part) {\n      return \"\".concat((cache == null ? void 0 : cache.key) || \"mantine\", \"-\").concat(part, \"-\").concat(className);\n    }).join(\" \") : name ? \"\".concat((cache == null ? void 0 : cache.key) || \"mantine\", \"-\").concat(name, \"-\").concat(className) : null);\n    return acc;\n  }, {});\n}\nexport { mergeClassNames };","map":null,"metadata":{},"sourceType":"module"}