{"ast":null,"code":"import { filterErrors } from '../filter-errors/filter-errors.js';\nimport { getPath } from '../paths/get-path.js';\nfunction getValidationResults(errors) {\n  var filteredErrors = filterErrors(errors);\n  return {\n    hasErrors: Object.keys(filteredErrors).length > 0,\n    errors: filteredErrors\n  };\n}\nfunction validateRulesRecord(rules, values) {\n  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  var errors = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (typeof rules !== \"object\" || rules === null) {\n    return errors;\n  }\n  return Object.keys(rules).reduce(function (acc, ruleKey) {\n    var rule = rules[ruleKey];\n    var rulePath = \"\".concat(path === \"\" ? \"\" : \"\".concat(path, \".\")).concat(ruleKey);\n    var value = getPath(rulePath, values);\n    var arrayValidation = false;\n    if (typeof rule === \"function\") {\n      acc[rulePath] = rule(value, values, rulePath);\n    }\n    if (typeof rule === \"object\" && Array.isArray(value)) {\n      arrayValidation = true;\n      value.forEach(function (_item, index) {\n        return validateRulesRecord(rule, values, \"\".concat(rulePath, \".\").concat(index), acc);\n      });\n    }\n    if (typeof rule === \"object\" && typeof value === \"object\" && value !== null) {\n      if (!arrayValidation) {\n        validateRulesRecord(rule, values, rulePath, acc);\n      }\n    }\n    return acc;\n  }, errors);\n}\nfunction validateValues(validate, values) {\n  if (typeof validate === \"function\") {\n    return getValidationResults(validate(values));\n  }\n  return getValidationResults(validateRulesRecord(validate, values));\n}\nexport { validateValues };","map":null,"metadata":{},"sourceType":"module"}