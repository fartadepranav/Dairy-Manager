{"ast":null,"code":"import _slicedToArray from \"F:\\\\Dairy Project\\\\dairy_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\nfunction serializeJSON(value, hookName) {\n  try {\n    return JSON.stringify(value);\n  } catch (error) {\n    throw new Error(\"@mantine/hooks \".concat(hookName, \": Failed to serialize the value\"));\n  }\n}\nfunction deserializeJSON(value) {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return value;\n  }\n}\nfunction createStorage(type, hookName) {\n  var eventName = type === \"localStorage\" ? \"mantine-local-storage\" : \"mantine-session-storage\";\n  return function useStorage(_ref) {\n    var key = _ref.key,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? void 0 : _ref$defaultValue,\n      _ref$getInitialValueI = _ref.getInitialValueInEffect,\n      getInitialValueInEffect = _ref$getInitialValueI === void 0 ? true : _ref$getInitialValueI,\n      _ref$deserialize = _ref.deserialize,\n      deserialize = _ref$deserialize === void 0 ? deserializeJSON : _ref$deserialize,\n      _ref$serialize = _ref.serialize,\n      serialize = _ref$serialize === void 0 ? function (value) {\n        return serializeJSON(value, hookName);\n      } : _ref$serialize;\n    var readStorageValue = useCallback(function (skipStorage) {\n      if (typeof window === \"undefined\" || !(type in window) || window[type] === null || skipStorage) {\n        return defaultValue;\n      }\n      var storageValue = window[type].getItem(key);\n      return storageValue !== null ? deserialize(storageValue) : defaultValue;\n    }, [key, defaultValue]);\n    var _useState = useState(readStorageValue(getInitialValueInEffect)),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n    var setStorageValue = useCallback(function (val) {\n      if (val instanceof Function) {\n        setValue(function (current) {\n          var result = val(current);\n          window[type].setItem(key, serialize(result));\n          window.dispatchEvent(new CustomEvent(eventName, {\n            detail: {\n              key: key,\n              value: val(current)\n            }\n          }));\n          return result;\n        });\n      } else {\n        window[type].setItem(key, serialize(val));\n        window.dispatchEvent(new CustomEvent(eventName, {\n          detail: {\n            key: key,\n            value: val\n          }\n        }));\n        setValue(val);\n      }\n    }, [key]);\n    var removeStorageValue = useCallback(function () {\n      window[type].removeItem(key);\n      window.dispatchEvent(new CustomEvent(eventName, {\n        detail: {\n          key: key,\n          value: defaultValue\n        }\n      }));\n    }, []);\n    useWindowEvent(\"storage\", function (event) {\n      var _a;\n      if (event.storageArea === window[type] && event.key === key) {\n        setValue(deserialize((_a = event.newValue) != null ? _a : void 0));\n      }\n    });\n    useWindowEvent(eventName, function (event) {\n      if (event.detail.key === key) {\n        setValue(event.detail.value);\n      }\n    });\n    useEffect(function () {\n      if (defaultValue !== void 0 && value === void 0) {\n        setStorageValue(defaultValue);\n      }\n    }, [defaultValue, value, setStorageValue]);\n    useEffect(function () {\n      if (getInitialValueInEffect) {\n        setValue(readStorageValue());\n      }\n    }, [key]);\n    return [value === void 0 ? defaultValue : value, setStorageValue, removeStorageValue];\n  };\n}\nexport { createStorage };","map":null,"metadata":{},"sourceType":"module"}