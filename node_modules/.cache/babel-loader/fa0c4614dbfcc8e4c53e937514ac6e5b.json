{"ast":null,"code":"import { useRef as $lwiWj$useRef, useEffect as $lwiWj$useEffect, useMemo as $lwiWj$useMemo } from \"react\";\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {\n  var callbackRef = $lwiWj$useRef(callback);\n  $lwiWj$useEffect(function () {\n    callbackRef.current = callback;\n  }); // https://github.com/facebook/react/issues/19240\n  return $lwiWj$useMemo(function () {\n    return function () {\n      var _callbackRef$current2;\n      var _callbackRef$current;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : (_callbackRef$current2 = _callbackRef$current).call.apply(_callbackRef$current2, [callbackRef].concat(args));\n    };\n  }, []);\n}\nexport { $b1b2314f5f9a1d84$export$25bec8c6f54ee79a as useCallbackRef };","map":null,"metadata":{},"sourceType":"module"}